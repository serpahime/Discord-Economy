const { cfg } = require('../../cfg');
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

module.exports = {
    name: 'privates',
    description: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã',
    async execute(client) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≥–∏–ª—å–¥–∏—é –∏—Å–ø–æ–ª—å–∑—É—è ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∫–ª–∏–µ–Ω—Ç–∞
            const guild = client.guilds.cache.get(client.config.guildId);
            if (!guild) {
                console.error('–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
            const channel = guild.channels.cache.get(cfg.privates.settings_channel_id);
            if (!channel) {
                console.error('–ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try {
                const messages = await channel.messages.fetch({ limit: 100 });
                if (messages.size > 0) {
                    await channel.bulkDelete(messages).catch(() => null);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞–Ω–∞–ª–∞:', error);
            }

            const embed = new EmbedBuilder()
                .setTitle('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π')
                .setDescription(
                    'üìù ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã.\n' +
                    '‚úèÔ∏è ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ.\n' +
                    'üîí ‚Äî –∑–∞–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö.\n' +
                    'üîì ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö.\n' +
                    'üö´ ‚Äî –∑–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n' +
                    'üîë ‚Äî –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∫–æ–º–Ω–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n' +
                    '‚ùå ‚Äî –≤—ã–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.\n' +
                    'üîá ‚Äî –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å.\n' +
                    'üîä ‚Äî –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å.'
                )
                .setThumbnail(guild.iconURL({ dynamic: true }))
                .setTimestamp();

            const row1 = new ActionRowBuilder().addComponents(
                new ButtonBuilder()
                    .setCustomId('privates_settings_name')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üìù'),
                new ButtonBuilder()
                    .setCustomId('privates_settings_limit')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('‚úèÔ∏è'),
                new ButtonBuilder()
                    .setCustomId('privates_settings_close')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üîí'),
                new ButtonBuilder()
                    .setCustomId('privates_settings_open')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üîì'),
                new ButtonBuilder()
                    .setCustomId('privates_settings_block')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üö´')
            );

            const row2 = new ActionRowBuilder().addComponents(
                new ButtonBuilder()
                    .setCustomId('privates_settings_unblock')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üîë'),
                new ButtonBuilder()
                    .setCustomId('privates_settings_kick')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('‚ùå'),
                new ButtonBuilder()
                    .setCustomId('privates_settings_mute')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üîá'),
                new ButtonBuilder()
                    .setCustomId('privates_settings_unmute')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üîä')
            );

            await channel.send({
                embeds: [embed],
                components: [row1, row2]
            });

            console.log('–≠–º–±–µ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —ç–º–±–µ–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏:', error);
        }
    },

    async handleButton(interaction, client) {
        try {
            const [action] = interaction.customId.split('_').slice(2);
            const member = interaction.member;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
            if (!member.voice.channel) {
                return await interaction.reply({
                    content: '‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ!',
                    flags: 64
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–º
            const Private = client.schemas.get('Private');
            const privateRoom = await Private.findOne({ room_id: member.voice.channel.id });

            if (!privateRoom) {
                return await interaction.reply({
                    content: '‚ùå –≠—Ç–æ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞!',
                    flags: 64
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
            if (privateRoom.owner_id !== member.id) {
                return await interaction.reply({
                    content: '‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã!',
                    flags: 64
                });
            }

            const channel = member.voice.channel;

            switch (action) {
                case 'name': {
                    await interaction.reply({
                        content: '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:',
                        ephemeral: true
                    });

                    const filter = m => m.author.id === member.id;
                    const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });

                    collector.on('collect', async (message) => {
                        const newName = message.content.slice(0, 32);
                        await channel.setName(`üîë„Éª${newName}`);
                        const reply = await message.reply(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: ${newName}`);
                        
                        // –£–¥–∞–ª—è–µ–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                        setTimeout(() => {
                            message.delete().catch(() => null);
                            reply.delete().catch(() => null);
                        }, 5000);
                    });

                    collector.on('end', collected => {
                        if (collected.size === 0) {
                            interaction.followUp({
                                content: '‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ',
                                ephemeral: true
                            });
                        }
                    });
                    break;
                }

                case 'limit': {
                    await interaction.reply({
                        content: '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Ç 1 –¥–æ 99):',
                        ephemeral: true
                    });

                    const filter = m => m.author.id === member.id && !isNaN(m.content) && m.content >= 1 && m.content <= 99;
                    const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });

                    collector.on('collect', async (message) => {
                        const limit = parseInt(message.content);
                        await channel.setUserLimit(limit);
                        await message.reply({ 
                            content: `‚úÖ –õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${limit}`,
                            deleteAfter: 5000 
                        });
                        await message.delete().catch(() => null);
                    });

                    collector.on('end', collected => {
                        if (collected.size === 0) {
                            interaction.followUp({
                                content: '‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ',
                                ephemeral: true
                            });
                        }
                    });
                    break;
                }

                case 'close': {
                    await channel.permissionOverwrites.edit(interaction.guild.id, {
                        Connect: false
                    });
                    await interaction.reply({
                        content: 'üîí –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                        ephemeral: true
                    });
                    break;
                }

                case 'open': {
                    await channel.permissionOverwrites.edit(interaction.guild.id, {
                        Connect: null
                    });
                    await interaction.reply({
                        content: 'üîì –ö–æ–º–Ω–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                        flags: 64
                    });
                    break;
                }

                case 'block': {
                    await interaction.reply({
                        content: 'üö´ –£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:',
                        ephemeral: true
                    });

                    const filter = m => m.author.id === member.id && m.mentions.members.size > 0;
                    const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });

                    collector.on('collect', async (message) => {
                        const targetMember = message.mentions.members.first();
                        if (targetMember.id === member.id) {
                            const reply = await message.reply('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è!');
                            setTimeout(() => {
                                message.delete().catch(() => null);
                                reply.delete().catch(() => null);
                            }, 5000);
                            return;
                        }
                        await channel.permissionOverwrites.edit(targetMember.id, {
                            Connect: false,
                            Speak: false
                        });
                        if (targetMember.voice.channelId === channel.id) {
                            await targetMember.voice.disconnect();
                        }
                        const reply = await message.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetMember} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
                        setTimeout(() => {
                            message.delete().catch(() => null);
                            reply.delete().catch(() => null);
                        }, 5000);
                    });

                    collector.on('end', collected => {
                        if (collected.size === 0) {
                            interaction.followUp({
                                content: '‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ',
                                ephemeral: true
                            });
                        }
                    });
                    break;
                }

                case 'unblock': {
                    await interaction.reply({
                        content: 'üîë –£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:',
                        ephemeral: true
                    });

                    const filter = m => m.author.id === member.id && m.mentions.members.size > 0;
                    const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });

                    collector.on('collect', async (message) => {
                        const targetMember = message.mentions.members.first();
                        await channel.permissionOverwrites.delete(targetMember.id);
                        await message.reply({ 
                            content: `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetMember} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`,
                            deleteAfter: 5000 
                        });
                        await message.delete().catch(() => null);
                    });

                    collector.on('end', collected => {
                        if (collected.size === 0) {
                            interaction.followUp({
                                content: '‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ',
                                ephemeral: true
                            });
                        }
                    });
                    break;
                }

                case 'kick': {
                    await interaction.reply({
                        content: '‚ùå –£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≥–Ω–∞—Ç—å:',
                        ephemeral: true
                    });

                    const filter = m => m.author.id === member.id && m.mentions.members.size > 0;
                    const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });

                    collector.on('collect', async (message) => {
                        const targetMember = message.mentions.members.first();
                        if (targetMember.id === member.id) {
                            const reply = await message.reply('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≥–Ω–∞—Ç—å —Å–µ–±—è!');
                            setTimeout(() => {
                                message.delete().catch(() => null);
                                reply.delete().catch(() => null);
                            }, 5000);
                            return;
                        }
                        if (targetMember.voice.channelId === channel.id) {
                            await targetMember.voice.disconnect();
                            const reply = await message.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetMember} –≤—ã–≥–Ω–∞–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã`);
                            setTimeout(() => {
                                message.delete().catch(() => null);
                                reply.delete().catch(() => null);
                            }, 5000);
                        } else {
                            const reply = await message.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetMember} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç–µ`);
                            setTimeout(() => {
                                message.delete().catch(() => null);
                                reply.delete().catch(() => null);
                            }, 5000);
                        }
                    });

                    collector.on('end', collected => {
                        if (collected.size === 0) {
                            interaction.followUp({
                                content: '‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ',
                                ephemeral: true
                            });
                        }
                    });
                    break;
                }

                case 'mute': {
                    await interaction.reply({
                        content: 'üîá –£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –≥–æ–≤–æ—Ä–∏—Ç—å:',
                        ephemeral: true
                    });

                    const filter = m => m.author.id === member.id && m.mentions.members.size > 0;
                    const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });

                    collector.on('collect', async (message) => {
                        const targetMember = message.mentions.members.first();
                        if (targetMember.id === member.id) {
                            const reply = await message.reply('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å —Å–µ–±—è!');
                            setTimeout(() => {
                                message.delete().catch(() => null);
                                reply.delete().catch(() => null);
                            }, 5000);
                            return;
                        }
                        await channel.permissionOverwrites.edit(targetMember.id, {
                            Speak: false
                        });
                        const reply = await message.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetMember} –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å`);
                        setTimeout(() => {
                            message.delete().catch(() => null);
                            reply.delete().catch(() => null);
                        }, 5000);
                    });

                    collector.on('end', collected => {
                        if (collected.size === 0) {
                            interaction.followUp({
                                content: '‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ',
                                ephemeral: true
                            });
                        }
                    });
                    break;
                }

                case 'unmute': {
                    await interaction.reply({
                        content: 'üîä –£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≥–æ–≤–æ—Ä–∏—Ç—å:',
                        ephemeral: true
                    });

                    const filter = m => m.author.id === member.id && m.mentions.members.size > 0;
                    const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });

                    collector.on('collect', async (message) => {
                        const targetMember = message.mentions.members.first();
                        await channel.permissionOverwrites.edit(targetMember.id, {
                            Speak: null
                        });
                        const reply = await message.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetMember} —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å`);
                        setTimeout(() => {
                            message.delete().catch(() => null);
                            reply.delete().catch(() => null);
                        }, 5000);
                    });

                    collector.on('end', collected => {
                        if (collected.size === 0) {
                            interaction.followUp({
                                content: '‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ',
                                ephemeral: true
                            });
                        }
                    });
                    break;
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è',
                flags: 64
            });
        }
    }
};