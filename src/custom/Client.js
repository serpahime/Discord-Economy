const { Client, Collection } = require('discord.js');
const { readdirSync } = require('fs');
const { join } = require('path');
const mongoose = require('mongoose');

class CustomClient extends Client {
    constructor(options) {
        super(options);
        this.handlers = new Collection();
        this.events = new Collection();
        this.commands = new Collection();
        this.schemas = new Collection();
        this._config = require('../config.json');
        this._emojis = require('../emoji.js');
    }

    get emojis() {
        return this._emojis;
    }

    get config() {
        return this._config;
    }

    async connectMongoDB() {
        try {
            const { url, database } = this.config.db;
            await mongoose.connect(url, {
                dbName: database
            });
            console.log('[Database] –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—ã –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await this.loadSchemas();
        } catch (error) {
            console.error('[Database] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
            await this.notifyDevelopers(error);
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π MongoDB
        mongoose.connection.on('error', async error => {
            console.error('[Database] –û—à–∏–±–∫–∞ MongoDB:', error);
            await this.notifyDevelopers(error);
        });

        mongoose.connection.on('disconnected', async () => {
            console.warn('[Database] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB');
            await this.notifyDevelopers('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB');
        });
    }

    async loadSchemas() {
        try {
            const schemasPath = join(__dirname, 'schemas');
            const schemaFiles = readdirSync(schemasPath).filter(file => file.endsWith('.js'));

            for (const file of schemaFiles) {
                const schema = require(join(schemasPath, file));
                const schemaName = file.split('.')[0];
                
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ö–µ–º—É –≤ mongoose
                if (!mongoose.models[schemaName]) {
                    mongoose.model(schemaName, schema);
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ö–µ–º—É –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                this.schemas.set(schemaName, mongoose.model(schemaName));
                console.log(`[Database] –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ö–µ–º–∞ ${schemaName}`);
            }
        } catch (error) {
            console.error('[Database] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ö–µ–º:', error);
            await this.notifyDevelopers(error);
        }
    }

    async loadHandlers() {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await this.connectMongoDB();

            const handlersPath = join(__dirname, '..', 'handlers');
            const handlerFiles = readdirSync(handlersPath).filter(file => file.endsWith('.js'));

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∞–∫, —á—Ç–æ–±—ã loadTasks –∑–∞–≥—Ä—É–∂–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º
            const sortedHandlers = handlerFiles.sort((a, b) => {
                if (a === 'loadTasks.js') return 1;
                if (b === 'loadTasks.js') return -1;
                return 0;
            });

            for (const file of sortedHandlers) {
                const handler = require(join(handlersPath, file));
                const handlerName = file.split('.')[0];
                
                this.handlers.set(handlerName, handler);
                
                if (typeof handler.execute === 'function') {
                    await handler.execute(this);
                    console.log(`[Handler] –ó–∞–≥—Ä—É–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ${handlerName}`);
                }
            }
        } catch (error) {
            console.error('[Handler] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:', error);
            await this.notifyDevelopers(error);
        }
    }

    async notifyDevelopers(error) {
        const { developersId } = this.config;
        
        for (const devId of developersId) {
            try {
                const dev = await this.users.fetch(devId);
                await dev.send({
                    content: `**üî¥ –û—à–∏–±–∫–∞:**\n\`\`\`js\n${error.stack || error}\n\`\`\``,
                });
            } catch (err) {
                console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É ${devId}:`, err);
            }
        }
    }
}

module.exports = CustomClient; 