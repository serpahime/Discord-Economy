const { SlashCommandBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const ComponentState = require('../ComponentState');
const { price, create, cfg } = require('../../../cfg');

const buttons = [
    {
        customId: 'marry_accept',
        async execute(interaction, client) {
            const state = ComponentState.getState(interaction.customId);
            const author = state.author;
            const user = state.user;
            const amsg = state.amsg;
            const umsg = state.umsg;

            const marrys = client.schemas.get('Marry');
            const User = client.schemas.get('Users');
            const marryData = await marrys.findOne({ users: { $in: author.id } });
            const marryDataUser = await marrys.findOne({ users: { $in: user.id } });
            const authorData = await User.findOne({ user_id: author.id });
            const userData = await User.findOne({ user_id: user.id });

            if (marryData) {
                return interaction.reply({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ', flags: 64 });
            }

            if (marryDataUser) {
                return interaction.reply({ content: '–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ', flags: 64 });
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –±—Ä–∞–∫–µ
            const newMarry = await marrys.create({
                users: [author.id, user.id],
                balance: 0,
                date: Math.floor(Date.now() / 1000),
                date_end: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7, // 7 –¥–Ω–µ–π
                name_love_room: `üíï„Éª${author.username} & ${user.username}`

            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –±—Ä–∞–∫–æ–≤ –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await User.updateOne(
                { user_id: author.id },
                { 
                    $set: { partner_id: user.id },
                    $inc: { balance: -price.marry },
                    $push: { 
                        history_marry: {
                            partner_id: user.id,
                            marry_id: newMarry._id,
                            date: Math.floor(Date.now() / 1000),
                            status: 'active'
                        }
                    }
                }
            );

            await User.updateOne(
                { user_id: user.id },
                { 
                    $set: { partner_id: author.id },
                    $push: { 
                        history_marry: {
                            partner_id: author.id,
                            marry_id: newMarry._id,
                            date: Math.floor(Date.now() / 1000),
                            status: 'active'
                        }
                    }
                }
            );

            const marryEmbed = {
                title: '–ó–∞–∫–ª—é—á–µ–Ω –±—Ä–∞–∫',
                description: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@${author.id}> –∏ <@${user.id}> –∑–∞–∫–ª—é—á–∏–ª–∏ –±—Ä–∞–∫.`,
                timestamp: new Date().toISOString(),
                thumbnail: {
                    url: user.displayAvatarURL({ size: 128 })
                },
                author: {
                    name: author.username,
                    iconURL: author.displayAvatarURL({ size: 128 })
                }
            }

            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('marry_balance')
                        .setLabel('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId('marry_nameroom')
                        .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞–≤—Ä—É–º—ã')
                        .setStyle(ButtonStyle.Primary),
                );

            await amsg.edit({ embeds: [marryEmbed], components: [row] });
            await umsg.edit({ embeds: [marryEmbed], components: [] });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await interaction.reply({
                content: `‚úÖ –ë—Ä–∞–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–ª—é—á–µ–Ω! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º <@${author.id}> –∏ <@${user.id}>`,
                flags: 64
            });
        }
    },
    {
        customId: 'marry_balance',
        async execute(interaction, client) {
            const state = ComponentState.getState(interaction.customId);
            const author = state.author;
            const marry = state.marry;

            const User = client.schemas.get('Users');
            const Marry = client.schemas.get('Marry');
            const userData = await User.findOne({ user_id: author.id });

            await interaction.reply({
                content: `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –±—Ä–∞–∫–∞ (–æ—Ç 1 –¥–æ ${userData.balance} ${client.emojis.zvezda})`,
                flags: 64
            });

            const filter = m => m.author.id === author.id && !isNaN(m.content) && parseInt(m.content) > 0 && parseInt(m.content) <= userData.balance;
            const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });

            collector.on('collect', async (message) => {
                const amount = parseInt(message.content);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
                await Promise.all([
                    User.updateOne(
                        { user_id: author.id },
                        { $inc: { balance: -amount } }
                    ),
                    Marry.updateOne(
                        { _id: marry._id },
                        { $inc: { balance: amount } }
                    )
                ]);

                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await message.delete().catch(() => {});
                const partner = userData.partner_id;


                // –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥ –ø—Ä–æ—Ñ–∏–ª—è
                const updatedMarry = await Marry.findById(marry._id);
                const embed = {
                    title: '–õ—é–±–æ–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å',
                    fields: [
                        {
                            name: '–ü–∞—Ä—Ç–Ω–µ—Ä',
                            value: `<@${partner}>`,
                            inline: true
                        },

                        {
                            name: '–ë–∞–ª–∞–Ω—Å',
                            value: `${updatedMarry.balance} ${client.emojis.zvezda}`,
                            inline: true
                        },
                        {
                            name: '–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –ª–∞–≤—Ä—É–º—É',
                            value: `<t:${updatedMarry.date_end}:R>`,
                            inline: true
                        },
                        {
                            name: '–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∞–≤—Ä—É–º—ã',
                            value: updatedMarry.name_love_room,
                            inline: true
                        }
                    ],
                    thumbnail: { url: author.displayAvatarURL({ size: 128 }) },
                    timestamp: new Date().toISOString()
                };

                const row = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('marry_balance')
                            .setLabel('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
                            .setStyle(ButtonStyle.Success),
                        new ButtonBuilder()
                            .setCustomId('marry_nameroom')
                            .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞–≤—Ä—É–º—ã')
                            .setStyle(ButtonStyle.Primary),
                        new ButtonBuilder()
                            .setCustomId('marry_divorce')
                            .setLabel('–†–∞–∑–≤–µ—Å—Ç–∏—Å—å')
                            .setStyle(ButtonStyle.Danger)
                    );

                await interaction.editReply({
                    content: `‚úÖ –ë–∞–ª–∞–Ω—Å –±—Ä–∞–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount} ${client.emojis.zvezda}`,
                    flags: 64
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await interaction.message.edit({ 
                    embeds: [embed], 
                    components: [row] 
                });
            });

            collector.on('end', (collected) => {
                if (collected.size === 0) {
                    interaction.editReply({
                        content: '‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ',
                        flags: 64
                    });
                }
            });
        }
    },
    {
        customId: 'marry_nameroom',
        async execute(interaction, client) {
            const state = ComponentState.getState(interaction.customId);
            const author = state.author;
            const marry = state.marry;

            const Marry = client.schemas.get('Marry');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –±—Ä–∞–∫–∞ –≤–º–µ—Å—Ç–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (marry.balance < price.marry_nameroom) {
                return interaction.reply({
                    content: `–ù–∞ –±–∞–ª–∞–Ω—Å–µ –±—Ä–∞–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è (${price.marry_nameroom} ${client.emojis.zvezda})`,
                    flags: 64
                });
            }

            await interaction.reply({
                content: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ª–∞–≤—Ä—É–º—ã:',
                flags: 64
            });

            const filter = m => m.author.id === author.id;
            const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });

            collector.on('collect', async (message) => {
                const newName = message.content;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ë–î –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞ –±—Ä–∞–∫–∞
                await Marry.updateOne(
                    { _id: marry._id },
                    { 
                        $set: { name_love_room: newName },
                        $inc: { balance: -price.marry_nameroom } // –°–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞ –±—Ä–∞–∫–∞
                    }
                );

                // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞, –º–µ–Ω—è–µ–º –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ
                if (marry.love_room_id) {
                    const guild = await client.guilds.fetch(client.config.guildId);
                    const channel = await guild.channels.fetch(marry.love_room_id).catch(() => null);
                    if (channel) {
                        await channel.setName(newName).catch(console.error);
                    }
                }

                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await message.delete().catch(() => {});
                const partner = userData.partner_id;

                // –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥ –ø—Ä–æ—Ñ–∏–ª—è
                const updatedMarry = await Marry.findById(marry._id);
                const embed = {
                    title: '–õ—é–±–æ–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å',
                    fields: [
                        {
                            name: '–ü–∞—Ä—Ç–Ω–µ—Ä',
                            value: `<@${partner}>`,
                            inline: true
                        },

                        {
                            name: '–ë–∞–ª–∞–Ω—Å',
                            value: `${updatedMarry.balance} ${client.emojis.zvezda}`,
                            inline: true
                        },
                        {
                            name: '–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –ª–∞–≤—Ä—É–º—É',
                            value: `<t:${updatedMarry.date_end}:R>`,
                            inline: true
                        },
                        {
                            name: '–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∞–≤—Ä—É–º—ã',
                            value: newName,
                            inline: true
                        }
                    ],
                    thumbnail: { url: author.displayAvatarURL({ size: 128 }) },
                    timestamp: new Date().toISOString()
                };

                const row = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('marry_balance')
                            .setLabel('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
                            .setStyle(ButtonStyle.Success),
                        new ButtonBuilder()
                            .setCustomId('marry_nameroom')
                            .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞–≤—Ä—É–º—ã')
                            .setStyle(ButtonStyle.Primary),
                        new ButtonBuilder()
                            .setCustomId('marry_divorce')
                            .setLabel('–†–∞–∑–≤–µ—Å—Ç–∏—Å—å')
                            .setStyle(ButtonStyle.Danger)
                    );

                await interaction.editReply({
                    content: `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∞–≤—Ä—É–º—ã –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "${newName}"\n–°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞ –±—Ä–∞–∫–∞: ${price.marry_nameroom} ${client.emojis.zvezda}`,
                    flags: 64
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await interaction.message.edit({ 
                    embeds: [embed], 
                    components: [row] 
                });
            });

            collector.on('end', (collected) => {
                if (collected.size === 0) {
                    interaction.editReply({
                        content: '‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ',
                        flags: 64
                    });
                }
            });
        }
    },
    {
        customId: 'marry_divorce',
        async execute(interaction, client) {
            const state = ComponentState.getState(interaction.customId);
            const author = state.author;

            const Marry = client.schemas.get('Marry');
            const User = client.schemas.get('Users');

            // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –æ –±—Ä–∞–∫–µ
            const marryData = await Marry.findOne({ users: { $in: author.id } });

            if (!marryData) {
                return interaction.reply({ content: '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ', flags: 64 });
            }

            // –ù–∞—Ö–æ–¥–∏–º ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (—Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ author.id)
            const partnerId = marryData.users.find(id => id !== author.id);

            // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –±—Ä–∞–∫–µ
            await Marry.deleteOne({ _id: marryData._id });

            // –£–±–∏—Ä–∞–µ–º —Ä–æ–ª—å —É –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const guild = await client.guilds.fetch(client.config.guildId);
            const authorMember = await guild.members.fetch(author.id);
            const partnerMember = await guild.members.fetch(partnerId);
            const role = guild.roles.cache.get('1340657424637628448');

            if (role) {
                await authorMember.roles.remove(role).catch(console.error);
                await partnerMember.roles.remove(role).catch(console.error);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await Promise.all([
                User.updateOne({ user_id: author.id }, { $set: { partner_id: null } }),
                User.updateOne({ user_id: partnerId }, { $set: { partner_id: null } })
            ]);

            await interaction.reply({
                content: `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ–ª–∏—Å—å —Å <@${partnerId}>!`,
                flags: 64
            });
        }
    },
];

module.exports = buttons;