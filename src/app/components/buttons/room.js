const ComponentState = require('../ComponentState');
const { price, create, cfg } = require('../../../cfg');
const { ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionFlagsBits } = require('discord.js');

const buttons = [
    {
        customId: 'room_rename',
        async execute(interaction, client) {
            const state = ComponentState.getState(interaction.customId);
            const user = state.user;
            const roombd = state.room;
            const msg = state.msg;
            const guild = state.guild;
            const priceRename = price.room_name;

            if (interaction.user.id !== user.id) {
                return interaction.reply({
                    embeds: [{
                        title: '‚ùå –û—à–∏–±–∫–∞',
                        description: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ',
                        color: 0xFF0000
                    }],
                    flags: ['Ephemeral']
                });
            }

            const Users = client.schemas.get('Users');
            const userdb = await Users.findOne({ user_id: user.id });
            const balance = Number(userdb.balance) || 0;

            if (balance < priceRename) {
                return interaction.reply({
                    embeds: [{
                        title: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
                        description: `–î–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ ${priceRename} ${client.emojis.zvezda}\n–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: ${balance} ${client.emojis.zvezda}`,
                        color: 0xFF0000
                    }],
                    flags: ['Ephemeral']
                });
            }

            await interaction.reply({
                embeds: [{
                    title: '‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã',
                    description: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –≤ —á–∞—Ç',
                    color: 0x3498DB
                }]
            });

            const filter = m => m.author.id === interaction.user.id;
            const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });

            collector.on('collect', async (message) => {
                const newName = message.content;
                
                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                try {
                    await message.delete();
                } catch (err) {
                    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', err);
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                const Room = client.schemas.get('Room');
                const existingRoom = await Room.findOne({ name_room: newName });
                if (existingRoom) {
                    return interaction.editReply({
                        embeds: [{
                            title: '‚ùå –û—à–∏–±–∫–∞',
                            description: '–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                            color: 0xFF0000
                        }],
                        flags: ['Ephemeral']
                    });
                }

                try {
                    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ guild
                    const role = await guild.roles.fetch(roombd.role_id);
                    const channel = await guild.channels.fetch(roombd.room_id);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏ –∫–∞–Ω–∞–ª–∞
                    await role.setName(newName);
                    await channel.setName(newName);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    await Room.updateOne(
                        { _id: roombd._id },
                        { $set: { name_room: newName, name_role: newName } }
                    );

                    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                    await Users.updateOne(
                        { user_id: user.id },
                        { $inc: { balance: -priceRename } }
                    );

                    await msg.edit({
                        content: '–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞',
                        embeds: [{
                            title: '‚úÖ –ö–æ–º–Ω–∞—Ç–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞',
                            description: `–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: **${newName}**\n–°–ø–∏—Å–∞–Ω–æ: ${priceRename} ${client.emojis.zvezda}`,
                            color: 0x2ECC71
                        }],
                        components: []
                    });
                } catch (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏:', err);
                    await interaction.editReply({
                        embeds: [{
                            title: '‚ùå –û—à–∏–±–∫–∞',
                            description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã',
                            color: 0xFF0000
                        }]
                    });
                }
            });

            collector.on('end', (collected) => {
                if (collected.size === 0) {
                    interaction.editReply({
                        embeds: [{
                            title: '‚ùå –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ',
                            description: '–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥',
                            color: 0xFF0000
                        }]
                    });
                }
            });
        }
    },
    {
        customId: 'room_give_dostup',
        async execute(interaction, client) {
            const state = ComponentState.getState(interaction.customId);
            const roombd = state.room;
            const msg = state.msg;
            const guild = state.guild;

            if (interaction.user.id !== roombd.owner_id) {
                return interaction.reply({
                    embeds: [{
                        title: '‚ùå –û—à–∏–±–∫–∞',
                        description: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ',
                        color: 0xFF0000
                    }],
                    flags: ['Ephemeral']
                });
            }

            await interaction.reply({
                embeds: [{
                    title: 'üë• –í—ã–¥–∞—á–∞ –¥–æ—Å—Ç—É–ø–∞',
                    description: '–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —á–∞—Ç–µ',
                    color: 0x3498DB
                }]
            });

            const filter = m => m.author.id === interaction.user.id && m.mentions.users.size > 0;
            const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });

            collector.on('collect', async (message) => {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    const targetUser = message.mentions.users.first();
                    if (!targetUser) {
                        await message.delete().catch(() => {});
                        return interaction.editReply({
                            embeds: [{
                                title: '‚ùå –û—à–∏–±–∫–∞',
                                description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω',
                                color: 0xFF0000
                            }]
                        });
                    }

                    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
                    await message.delete().catch(() => {});

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –ª–∏ —ç—Ç–æ
                    if (targetUser.id === roombd.owner_id) {
                        return interaction.editReply({
                            embeds: [{
                                title: '‚ùå –û—à–∏–±–∫–∞',
                                description: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–æ–º–Ω–∞—Ç—ã',
                                color: 0xFF0000
                            }]
                        });
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–æ–ª–∏
                    const role = await guild.roles.fetch(roombd.role_id);
                    if (!role) {
                        return interaction.editReply({
                            embeds: [{
                                title: '‚ùå –û—à–∏–±–∫–∞',
                                description: '–†–æ–ª—å –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                                color: 0xFF0000
                            }]  
                        });
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ—Å—Ç—É–ø
                    const Room = client.schemas.get('Room');
                    const roomData = await Room.findOne({ _id: roombd._id });
                    if (roomData.users.includes(targetUser.id)) {
                        return interaction.editReply({
                            embeds: [{
                                title: '‚ùå –û—à–∏–±–∫–∞',
                                description: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ',
                                color: 0xFF0000
                            }]
                        });
                    }

                    // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
                    const member = await guild.members.fetch(targetUser.id).catch(() => null);
                    if (!member) {
                        return interaction.editReply({
                            embeds: [{
                                title: '‚ùå –û—à–∏–±–∫–∞',
                                description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
                                color: 0xFF0000
                            }]
                        });
                    }

                    // –í—ã–¥–∞–µ–º —Ä–æ–ª—å
                    await member.roles.add(role.id);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
                    await Room.updateOne(
                        { _id: roombd._id },
                        { $push: { users: targetUser.id } }
                    );

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                    await interaction.editReply({
                        embeds: [{
                            title: '‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω',
                            description: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ`,
                            color: 0x2ECC71
                        }]
                    });

                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await msg.edit({ components: [] });

                } catch (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞:', err);
                    await interaction.editReply({
                        embeds: [{
                            title: '‚ùå –û—à–∏–±–∫–∞',
                            description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞',
                            color: 0xFF0000
                        }]
                    });
                }
            });

            collector.on('end', (collected) => {
                if (collected.size === 0) {
                    interaction.editReply({
                        embeds: [{
                            title: '‚ùå –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ',
                            description: '–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥',
                            color: 0xFF0000
                        }]
                    });
                }
            });
        }
    },

    {
        customId: 'room_ungive_dostup',
        async execute(interaction, client) {
            const state = ComponentState.getState(interaction.customId);
            const roombd = state.room;
            const msg = state.msg;
            const guild = state.guild;

            if (interaction.user.id !== roombd.owner_id) {
                return interaction.reply({
                    embeds: [{
                        title: '‚ùå –û—à–∏–±–∫–∞',
                        description: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ',
                        color: 0xFF0000
                    }],
                    flags: ['Ephemeral']
                });
            }

            await interaction.reply({
                embeds: [{
                    title: 'üö´ –°–Ω—è—Ç–∏–µ –¥–æ—Å—Ç—É–ø–∞',
                    description: '–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —á–∞—Ç–µ',
                    color: 0x3498DB
                }]
            });

            const filter = m => m.author.id === interaction.user.id && m.mentions.users.size > 0;
            const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });

            collector.on('collect', async (message) => {
                const targetUser = message.mentions.users.first();
                await message.delete();

                const Room = client.schemas.get('Room');

                if (!roombd.users.includes(targetUser.id)) {
                    return interaction.editReply({
                        embeds: [{
                            title: '‚ùå –û—à–∏–±–∫–∞',
                            description: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–Ω–∞—Ç–µ',
                            color: 0xFF0000
                        }]
                    });
                }

                try {
                    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —á–µ—Ä–µ–∑ guild
                    const role = await guild.roles.fetch(roombd.role_id);
                    // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ guild
                    const member = await guild.members.fetch(targetUser.id);

                    await member.roles.remove(role.id);
                    await Room.updateOne(
                        { _id: roombd._id },
                        { $pull: { users: targetUser.id } }
                    );

                    await msg.edit({
                        embeds: [{
                            title: '‚úÖ –î–æ—Å—Ç—É–ø —Å–Ω—è—Ç',
                            description: `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser} –±—ã–ª —Å–Ω—è—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ`,
                            color: 0x2ECC71
                        }],
                        components: []
                    });
                } catch (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –¥–æ—Å—Ç—É–ø–∞:', err);
                    await interaction.editReply({
                        embeds: [{
                            title: '‚ùå –û—à–∏–±–∫–∞',
                            description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –¥–æ—Å—Ç—É–ø–∞',
                            color: 0xFF0000
                        }]
                    });
                }
            });

            collector.on('end', (collected) => {
                if (collected.size === 0) {
                    interaction.editReply({
                        embeds: [{
                            title: '‚ùå –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ',
                            description: '–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥',
                            color: 0xFF0000
                        }]
                    });
                }
            });
        }
    },

    {
        customId: 'color_role_set',
        async execute(interaction, client) {
            const state = ComponentState.getState(interaction.customId);
            const roombd = state.room;
            const priceColor = price.room_color;

            if (interaction.user.id !== roombd.owner_id) {
                return interaction.reply({
                    embeds: [{
                        title: '‚ùå –û—à–∏–±–∫–∞',
                        description: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ',
                        color: 0xFF0000
                    }],
                    flags: ['Ephemeral']
                });
            }

            const Users = client.schemas.get('Users');
            const userdb = await Users.findOne({ user_id: interaction.user.id });
            const balance = Number(userdb?.balance) || 0;

            if (balance < priceColor) {
                return interaction.reply({
                    embeds: [{
                        title: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
                        description: `–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ ${priceColor} ${client.emojis.zvezda}\n–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: ${balance} ${client.emojis.zvezda}`,
                        color: 0xFF0000
                    }],
                    flags: ['Ephemeral']
                });
            }

            await interaction.reply({
                embeds: [{
                    title: 'üé® –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ä–æ–ª–∏',
                    description: '–í–≤–µ–¥–∏—Ç–µ HEX-–∫–æ–¥ —Ü–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #FF0000)',
                    color: 0x3498DB
                }]
            });

            const filter = m => m.author.id === interaction.user.id && m.content.startsWith('#');
            const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });

            collector.on('collect', async (message) => {
                try {
                    const colorCode = message.content.trim();
                    await message.delete().catch(() => {});

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞
                    if (!/^#[0-9A-F]{6}$/i.test(colorCode)) {
                        return interaction.editReply({
                            embeds: [{
                                title: '‚ùå –û—à–∏–±–∫–∞',
                                description: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HEX-–∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #FF0000)',
                                color: 0xFF0000
                            }]
                        });
                    }

                    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å
                    const role = await guild.roles.fetch(roombd.role_id);
                    if (!role) {
                        return interaction.editReply({
                            embeds: [{
                                title: '‚ùå –û—à–∏–±–∫–∞',
                                description: '–†–æ–ª—å –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                                color: 0xFF0000
                            }]
                        });
                    }

                    // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ä–æ–ª–∏
                    await role.setColor(colorCode);

                    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                    await Users.updateOne(
                        { user_id: interaction.user.id },
                        { $inc: { balance: -priceColor } }
                    );

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await msg.edit({
                        embeds: [{
                            title: '‚úÖ –¶–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω',
                            description: `–ù–æ–≤—ã–π —Ü–≤–µ—Ç: ${colorCode}\n–°–ø–∏—Å–∞–Ω–æ: ${priceColor} ${client.emojis.zvezda}`,
                            color: parseInt(colorCode.replace('#', ''), 16)
                        }],
                        components: []
                    });

                } catch (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞:', err);
                    await interaction.editReply({
                        embeds: [{
                            title: '‚ùå –û—à–∏–±–∫–∞',
                            description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞ —Ä–æ–ª–∏',
                            color: 0xFF0000
                        }]
                    });
                }
            });

            collector.on('end', (collected) => {
                if (collected.size === 0) {
                    interaction.editReply({
                        embeds: [{
                            title: '‚ùå –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ',
                            description: '–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ü–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥',
                            color: 0xFF0000
                        }]
                    });
                }
            });
        }
    },

    {
        customId: 'vklchat',
        async execute(interaction, client) {
            const state = ComponentState.getState(interaction.customId);
            const roombd = state.room;
            const msg = state.msg;
            const guild = state.guild;

            if (interaction.user.id !== roombd.owner_id) {
                return interaction.reply({
                    embeds: [{
                        title: '‚ùå –û—à–∏–±–∫–∞',
                        description: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ',
                        color: 0xFF0000
                    }],
                    flags: ['Ephemeral']
                });
            }

            try {
                // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ guild
                const category = await guild.channels.fetch(cfg.room_create.room_category_id);

                // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
                const permissionOverwrites = [
                    {
                        id: guild.roles.everyone.id,
                        deny: [PermissionFlagsBits.ViewChannel]
                    },
                    {
                        id: roombd.role_id,
                        allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.ReadMessageHistory, PermissionFlagsBits.AttachFiles]
                    }
                ];

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
                for (const roleId of cfg.room_create.block_roles) {
                    const blockedRole = guild.roles.cache.get(roleId);
                    if (blockedRole) {
                        permissionOverwrites.push({
                            id: blockedRole.id,
                            deny: [PermissionFlagsBits.ViewChannel]
                        });
                    }
                }

                const chatChannel = await guild.channels.create({
                    name: roombd.name_room,
                    type: 0,
                    parent: category,
                    reason: '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞ –ª–∏—á–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã',
                    permissionOverwrites: permissionOverwrites
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ë–î
                const Room = client.schemas.get('Room');
                await Room.updateOne(
                    { _id: roombd._id },
                    { 
                        $set: { 
                            chat: true,
                            chat_id: chatChannel.id
                        }
                    }
                );

                await msg.edit({
                    embeds: [{
                        title: '‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω',
                        description: `–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª ${chatChannel} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`,
                        color: 0x2ECC71
                    }],
                    components: []
                });
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞:', err);
                await interaction.reply({
                    embeds: [{
                        title: '‚ùå –û—à–∏–±–∫–∞',
                        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞',
                        color: 0xFF0000
                    }],
                    flags: ['Ephemeral']
                });
            }
        }
    },

    {
        customId: 'otklchat',
        async execute(interaction, client) {
            const state = ComponentState.getState(interaction.customId);
            const roombd = state.room;
            const msg = state.msg;
            const guild = state.guild;

            if (interaction.user.id !== roombd.owner_id) {
                return interaction.reply({
                    embeds: [{
                        title: '‚ùå –û—à–∏–±–∫–∞',
                        description: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ',
                        color: 0xFF0000
                    }],
                    flags: ['Ephemeral']
                });
            }

            try {
                // –ü–æ–ª—É—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ guild
                if (roombd.chat_id) {
                    const chatChannel = await guild.channels.fetch(roombd.chat_id);
                    if (chatChannel) {
                        await chatChannel.delete('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞ –ª–∏—á–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤–ª–∞–¥–µ–ª—å—Ü–∞');
                    }
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ë–î
                const Room = client.schemas.get('Room');
                await Room.updateOne(
                    { _id: roombd._id },
                    { 
                        $set: { 
                            chat: false,
                            chat_id: null
                        }
                    }
                );

                await msg.edit({
                    embeds: [{
                        title: '‚úÖ –ß–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω',
                        description: '–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
                        color: 0x2ECC71
                    }],
                    components: []
                });
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞:', err);
                await interaction.reply({
                    embeds: [{
                        title: '‚ùå –û—à–∏–±–∫–∞',
                        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞',
                        color: 0xFF0000
                    }],
                    flags: ['Ephemeral']
                });
            }
        }
    },
    {
        customId: 'delete_room',
        async execute(interaction, client) {
            const state = ComponentState.getState(interaction.customId);
            const roombd = state.room;
            const msg = state.msg;
            const guild = state.guild;

            if (interaction.user.id !== roombd.owner_id) {
                return interaction.reply({
                    embeds: [{
                        title: '‚ùå –û—à–∏–±–∫–∞',
                        description: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ',
                    }],
                });
            }
            
            const embed = {
                title: '–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã',
                description: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É?',
                color: 0x2b2d31,
                thumbnail: { url: interaction.user.displayAvatarURL({ size: 128 }) }
            }

            const states = ComponentState.createMany(
                ['delete_room_yes', 'delete_room_no'],
                {
                    user: interaction.user,
                    room: roombd,
                    msg: msg,
                    guild: guild
                }
            )

            const row = new ActionRowBuilder().addComponents(
                new ButtonBuilder()
                    .setCustomId(states.delete_room_yes)
                    .setLabel('–î–∞')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId(states.delete_room_no)
                    .setLabel('–ù–µ—Ç')
                    .setStyle(ButtonStyle.Danger)
            )

            await interaction.deferUpdate();
            await msg.edit({
                embeds: [embed],
                components: [row]
            })
        }
    },
    {
        customId: 'delete_room_yes',
        async execute(interaction, client) {
            const state = ComponentState.getState(interaction.customId);
            const user = state.user;
            const roombd = state.room;
            const msg = state.msg;
            const guild = state.guild;

            if(interaction.user.id !== user.id) {
                return interaction.reply({
                    embeds: [{
                        title: '‚ùå –û—à–∏–±–∫–∞',
                        description: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ',
                    }],
                })
            }

            const Room = client.schemas.get('Room');
            const role = await guild.roles.fetch(roombd.role_id);
            const channel = await guild.channels.fetch(roombd.room_id);
            await Room.deleteOne({ _id: roombd._id });
            await role.delete();
            await channel.delete('–£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤–ª–∞–¥–µ–ª—å—Ü–∞');


            await msg.edit({
                embeds: [{
                    title: '‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞',
                    description: '–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
                    color: 0x2ECC71,
                    thumbnail: { url: interaction.user.displayAvatarURL({ size: 128 }) }
                }],
                components: []
            })
        }
    },
    {
        customId: 'delete_room_no',
        async execute(interaction, client) {
            const state = ComponentState.getState(interaction.customId);
            const user = state.user;
            const roombd = state.room;
            const msg = state.msg;
            const guild = state.guild;

            if(interaction.user.id !== user.id) {
                return interaction.reply({
                    embeds: [{
                        title: '‚ùå –û—à–∏–±–∫–∞',
                        description: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ',
                    }],
                })
            }
            await interaction.deferUpdate();
            await msg.edit({
                embeds: [{
                    title: '‚úÖ –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–µ–Ω–∞',
                    description: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–µ–Ω–∞',
                }],
                components: []
            })
        }
    }
]

module.exports = buttons;