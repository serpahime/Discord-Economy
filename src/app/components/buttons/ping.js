const { ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const ComponentState = require('../ComponentState');

const buttons = [
    {
        customId: 'refresh_ping',
        async execute(interaction, client) {
            const state = ComponentState.getState(interaction.customId);
            if (!state) {
                return interaction.reply({
                    content: '‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–µ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/ping` —Å–Ω–æ–≤–∞.',
                    flags: ['Ephemeral']
                });
            }

            if (interaction.user.id !== state.user.id) {
                return interaction.reply({
                    content: '‚ùå –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–∑–≤–∞–≤—à–∏–π –∫–æ–º–∞–Ω–¥—É, –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!',
                    flags: ['Ephemeral']
                });
            }

            if (interaction.channelId !== state.channel.id) {
                return interaction.reply({
                    content: '‚ùå –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ, –≥–¥–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞!',
                    flags: ['Ephemeral']
                });
            }

            await interaction.update({
                content: '–û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...',
                components: []
            });

            const latency = Date.now() - interaction.createdTimestamp;
            const apiLatency = Math.round(client.ws.ping);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±–µ–∏—Ö –∫–Ω–æ–ø–æ–∫
            const states = ComponentState.createMany(['refresh_ping', 'clear_ping'], {
                user: state.user,
                guild: state.guild,
                channel: state.channel,
                member: state.member
            });

            const refreshButton = new ButtonBuilder()
                .setCustomId(states.refresh_ping)
                .setLabel('–û–±–Ω–æ–≤–∏—Ç—å')
                .setStyle(ButtonStyle.Primary)
                .setEmoji('üîÑ');

            const clearButton = new ButtonBuilder()
                .setCustomId(states.clear_ping)
                .setLabel('–û—á–∏—Å—Ç–∏—Ç—å')
                .setStyle(ButtonStyle.Danger)
                .setEmoji('üóëÔ∏è');

            const row = new ActionRowBuilder()
                .addComponents(refreshButton, clearButton);

            ComponentState.delete(interaction.customId);

            await interaction.editReply({
                content: `üèì –ü–æ–Ω–≥!\n‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: \`${latency}ms\`\nüì° API: \`${apiLatency}ms\``,
                components: [row]
            });
        }
    },
    {
        customId: 'clear_ping',
        async execute(interaction, client) {
            const state = ComponentState.getState(interaction.customId);
            if (!state) {
                return interaction.reply({
                    content: '‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–µ–∫.',
                    ephemeral: true
                });
            }

            if (interaction.user.id !== state.user.id) {
                return interaction.reply({
                    content: '‚ùå –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–∑–≤–∞–≤—à–∏–π –∫–æ–º–∞–Ω–¥—É, –º–æ–∂–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!',
                    ephemeral: true
                });
            }

            ComponentState.delete(interaction.customId);
            await interaction.update({
                content: '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ',
                components: []
            });
        }
    }
];

module.exports = buttons; 