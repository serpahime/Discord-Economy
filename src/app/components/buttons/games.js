const { SlashCommandBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const ComponentState = require('../ComponentState');
const { price, create } = require('../../../cfg');
const axios = require('axios');
const { activeDuels, duelCooldowns, COOLDOWN_TIME, activeDuelMessages } = require('../../commands/games');

// –ú–∞—Å—Å–∏–≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
const searchQueries = [
    'anime fight scene',
    'dragon ball z battle',
    'naruto vs sasuke',
    'one punch man fight',
    'jojo stand battle',
    'bleach ichigo fight',
    'one piece luffy battle',
    'attack on titan fight',
    'demon slayer battle',
    'my hero academia fight',
    'hunter x hunter fight',
    'sword art online fight',
    'fate series fight',
    'black clover fight',
    'tokyo ghoul fight'
];

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ GIF
async function getRandomFightGif() {
    const randomQuery = searchQueries[Math.floor(Math.random() * searchQueries.length)];
    const response = await axios.get('https://api.giphy.com/v1/gifs/search', {
        params: {
            api_key: 'Hz6fM49NZMV535vubRR9iZr0wq185ErY', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á –æ—Ç GIPHY
            q: randomQuery,
            limit: 50,
            rating: 'pg-13'
        }
    });

    const gifs = response.data.data;
    const randomGif = gifs[Math.floor(Math.random() * gifs.length)];
    return randomGif.images.original.url;
}

const buttons = [
    {
        customId: 'duel_accept',
        async execute(interaction, client) {
            try {
                const state = ComponentState.getState(interaction.customId);
                const Users = client.schemas.get('Users');
                const author = state.author;
                const msg = state.msg;
                const sum = state.sum;
                const authorData = state.authorData;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –µ—â–µ –¥—É—ç–ª—å
                if (!activeDuels.has(author.id)) {
                    return interaction.reply({ 
                        content: '‚ùå –≠—Ç–∞ –¥—É—ç–ª—å —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞',
                        ephemeral: true 
                    });
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –¥—É—ç–ª–∏ –ª–∏ —É–∂–µ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π
                if (activeDuels.has(interaction.user.id)) {
                    return interaction.reply({ 
                        content: '‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –¥—É—ç–ª—å! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.',
                        ephemeral: true 
                    });
                }

                if (interaction.user.id === author.id) {
                    return interaction.reply({ 
                        content: '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –¥—É—ç–ª—å', 
                        ephemeral: true 
                    });
                }

                await interaction.reply({
                    content: `‚öîÔ∏è –î—É—ç–ª—å –º–µ–∂–¥—É <@${author.id}> –∏ <@${interaction.user.id}> –Ω–∞—á–∞–ª–∞—Å—å!`,
                    flags: 64
                });

                const user = interaction.user;
                const userData = await Users.findOne({ user_id: user.id });

                if (userData.balance < sum) {
                    return interaction.followUp({
                        content: `‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ${sum - userData.balance} ${client.emojis.zvezda}`,
                        flags: 64
                    });
                }

                if (authorData.balance < sum) {
                    return interaction.followUp({
                        content: `‚ùå –£ –∞–≤—Ç–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ${sum - authorData.balance} ${client.emojis.zvezda}`,
                        flags: 64
                    });
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –±–æ—è
                const fightEmbed = {
                    title: '‚öîÔ∏è –ò–¥—ë—Ç –±–æ–π!',
                    description: `${author.username} **VS** ${user.username}\n\n*–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...*`,
                    image: {
                        url: await getRandomFightGif()
                    },
                    color: 0x2f3136,
                    timestamp: new Date().toISOString()
                };

                await msg.edit({ embeds: [fightEmbed], components: [] });

                // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
                await new Promise(resolve => setTimeout(resolve, 5000));

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                const winner = Math.random() < 0.5 ? author : user;
                const loser = winner === author ? user : author;

                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
                await Users.updateOne(
                    { user_id: winner.id },
                    { $inc: { balance: sum } }
                );
                await Users.updateOne(
                    { user_id: loser.id },
                    { $inc: { balance: -sum } }
                );

                const resultEmbed = {
                    title: 'üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥—É—ç–ª–∏',
                    description: `**–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** <@${winner.id}>\n**–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π:** <@${loser.id}>\n**–ù–∞–≥—Ä–∞–¥–∞:** ${sum} ${client.emojis.zvezda}`,
                    image: {
                        url: await getRandomFightGif()
                    },

                    fields: [
                        {
                            name: 'üí´ –°—Ç–∞—Ç—É—Å',
                            value: `<@${winner.id}> –∑–∞–±–∏—Ä–∞–µ—Ç **${sum}** ${client.emojis.zvezda} —É <@${loser.id}>`
                        }
                    ],
                    color: 0x2f3136,
                    timestamp: new Date().toISOString()
                };

                await msg.edit({ 
                    embeds: [resultEmbed],
                    components: [] 
                });

                await interaction.channel.send({
                    content: `‚öîÔ∏è –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞! <@${winner.id}> –ø–æ–±–µ–¥–∏–ª –∏ –ø–æ–ª—É—á–∞–µ—Ç **${sum}** ${client.emojis.zvezda}`
                });

                // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—É—ç–ª–∏:
                activeDuels.delete(author.id);
                activeDuels.delete(interaction.user.id);
                activeDuelMessages.delete(author.id);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                duelCooldowns.set(author.id, Date.now() + COOLDOWN_TIME);
                duelCooldowns.set(interaction.user.id, Date.now() + COOLDOWN_TIME);

            } catch (error) {
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏
                activeDuels.delete(author?.id);
                activeDuels.delete(interaction.user.id);
                console.error('–û—à–∏–±–∫–∞ –≤ –¥—É—ç–ª–∏:', error);
                await interaction.followUp({
                    content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –¥—É—ç–ª–∏',
                    ephemeral: true
                });
            }
        }
    }
];

module.exports = buttons;