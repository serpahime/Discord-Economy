const { SlashCommandBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const ComponentState = require('../components/ComponentState');

const games = {
    slots: {
        symbols: ['üíé', '7Ô∏è‚É£', 'üé∞', 'üçÄ', '‚≠ê', 'üåü'],
        multipliers: {
            '777': 15,
            'diamonds': 10,
            'mixed': 3
        },
        gifs: {
            win: 'https://cdn.discordapp.com/attachments/1234567890/win.gif', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ URL
            lose: 'https://cdn.discordapp.com/attachments/1234567890/lose.gif'
        }
    },
    roulette: {
        numbers: {
            red: [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36],
            black: [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35],
            green: [0]
        },
        multipliers: {
            red: 2,
            black: 2,
            green: 5
        }
    }
};

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è VIP-–∏–≥—Ä–æ–∫–æ–≤
const vipResultStore = new Map();

const commands = [{
    data: new SlashCommandBuilder()
        .setName('casino')
        .setDescription('–ò–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ'),

    async execute(interaction, client, dbUser) {
        const embed = new EmbedBuilder()
            .setTitle('üé∞ –ö–∞–∑–∏–Ω–æ')
            .setDescription(`
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:
                
                üé∞ **–°–ª–æ—Ç—ã**
                > –ú–Ω–æ–∂–∏—Ç–µ–ª–∏:
                > 777 - x15
                > üíéüíéüíé - x10
                > –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö - x3
                
                üé≤ **–†—É–ª–µ—Ç–∫–∞**
                > –ú–Ω–æ–∂–∏—Ç–µ–ª–∏:
                > –ö—Ä–∞—Å–Ω–æ–µ/–ß–µ—Ä–Ω–æ–µ - x2
                > –ó–µ–ª–µ–Ω–æ–µ - x5
                
                üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${dbUser.balance} –º–æ–Ω–µ—Ç
            `)
            .setColor(0x2b2d31)
            .setThumbnail('https://cdn.discordapp.com/attachments/1234567890/casino.gif'); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL

        const slotsButton = new ButtonBuilder()
            .setCustomId('play_slots')
            .setLabel('–°–ª–æ—Ç—ã')
            .setEmoji('üé∞')
            .setStyle(ButtonStyle.Primary);

        const rouletteButton = new ButtonBuilder()
            .setCustomId('play_roulette')
            .setLabel('–†—É–ª–µ—Ç–∫–∞')
            .setEmoji('üé≤')
            .setStyle(ButtonStyle.Primary);

        const row = new ActionRowBuilder().addComponents(slotsButton, rouletteButton);

        /*return interaction.reply({
            embeds: [{
                title: '‚ùå –ö–æ–º–∞–Ω–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
                description: '–ü–µ—Ä–µ–¥–∞—á–∞ –º–æ–Ω–µ—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.',
                color: 0xFF0000,
                thumbnail: {
                    url: interaction.user.displayAvatarURL({ size: 128 })
                },
                timestamp: new Date().toISOString()
            }],
            ephemeral: true // –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –∫–æ–º–∞–Ω–¥—ã
        });*/

        const message = await interaction.reply({
            embeds: [embed],
            components: [row],
            fetchReply: true
        });

        const collector = message.createMessageComponentCollector({ time: 60000 });

        collector.on('collect', async i => {
            if (i.user.id !== interaction.user.id) {
                return i.reply({ content: '–≠—Ç–∞ –∏–≥—Ä–∞ –Ω–µ –¥–ª—è –≤–∞—Å!', ephemeral: true });
            }

            switch (i.customId) {
                case 'play_slots':
                    await showBetModal(i, 'slots');
                    break;
                case 'play_roulette':
                    await showBetModal(i, 'roulette');
                    break;
            }
        });
    }
}];

async function showBetModal(interaction, gameType) {
    const Users = interaction.client.schemas.get('Users');
    const dbUser = await Users.findOne({ user_id: interaction.user.id });
    const VIP_USER_ID = '995032922207821884'; // ID –æ—Å–æ–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if (!dbUser) {
        return interaction.reply({ 
            content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
            ephemeral: true 
        });
    }

    const modal = new ModalBuilder()
        .setCustomId(`bet_modal_${gameType}`)
        .setTitle(gameType === 'slots' ? '–ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã' : '–ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É');

    const betInput = new TextInputBuilder()
        .setCustomId('bet_amount')
        .setLabel(`–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É (–±–∞–ª–∞–Ω—Å: ${dbUser.balance})`)
        .setStyle(TextInputStyle.Short)
        .setMinLength(2)
        .setMaxLength(6)
        .setPlaceholder('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 50')
        .setRequired(true);

    const colorInput = gameType === 'roulette' ? new TextInputBuilder()
        .setCustomId('color_choice')
        .setLabel('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç (red/black/green)')
        .setStyle(TextInputStyle.Short)
        .setRequired(true) : null;

    const firstRow = new ActionRowBuilder().addComponents(betInput);
    const rows = [firstRow];
    
    if (colorInput) {
        const secondRow = new ActionRowBuilder().addComponents(colorInput);
        rows.push(secondRow);
    }

    modal.addComponents(rows);
    await interaction.showModal(modal);

    try {
        const modalInteraction = await interaction.awaitModalSubmit({
            time: 60000,
            filter: i => i.user.id === interaction.user.id
        });

        const bet = parseInt(modalInteraction.fields.getTextInputValue('bet_amount'));
        let color = null;
        
        if (gameType === 'roulette') {
            color = modalInteraction.fields.getTextInputValue('color_choice').toLowerCase();
            if (!['red', 'black', 'green'].includes(color)) {
                return modalInteraction.reply({ 
                    content: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ red, black –∏–ª–∏ green.', 
                    ephemeral: true 
                });
            }
        }
        
        if (bet <= 0) {
            return modalInteraction.reply({ 
                content: '‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!', 
                ephemeral: true 
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VIP
        if (modalInteraction.user.id === VIP_USER_ID) {
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            const winButton = new ButtonBuilder()
                .setCustomId('vip_win')
                .setLabel('–í—ã–∏–≥—Ä–∞—Ç—å')
                .setStyle(ButtonStyle.Success);
                
            const loseButton = new ButtonBuilder()
                .setCustomId('vip_lose')
                .setLabel('–ü—Ä–æ–∏–≥—Ä–∞—Ç—å')
                .setStyle(ButtonStyle.Danger);
                
            const row = new ActionRowBuilder().addComponents(winButton, loseButton);
            
            // –ò–ó–ú–ï–ù–ï–ù–û: –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º ephemeral: true –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await modalInteraction.reply({
                content: '**VIP-—Ä–µ–∂–∏–º**: –•–æ—Ç–∏—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –≤ —ç—Ç–æ–π –∏–≥—Ä–µ?',
                components: [row],
                ephemeral: true
            });
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
            const message = await modalInteraction.fetchReply();
            const filter = i => i.user.id === modalInteraction.user.id && 
                                (i.customId === 'vip_win' || i.customId === 'vip_lose');
            
            const collector = message.createMessageComponentCollector({ 
                filter, 
                time: 30000,
                max: 1
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
            collector.on('collect', async (buttonInteraction) => {
                const wantToWin = buttonInteraction.customId === 'vip_win';
                
                // –ò–ó–ú–ï–ù–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
                await buttonInteraction.update({
                    content: `–í—ã –≤—ã–±—Ä–∞–ª–∏: ${wantToWin ? '**–í—ã–∏–≥—Ä–∞—Ç—å**' : '**–ü—Ä–æ–∏–≥—Ä–∞—Ç—å**'}`,
                    components: []
                });

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                const storeKey = `${modalInteraction.user.id}:${gameType}`;
                vipResultStore.set(storeKey, {
                    wantToWin,
                    bet,
                    color
                });

                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–π
                try {
                    if (gameType === 'slots') {
                        await createNewSlotGame(modalInteraction, bet, dbUser);
                    } else {
                        await createNewRouletteGame(modalInteraction, bet, color, dbUser);
                    }
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∏–≥—Ä—ã:", error);
                    await buttonInteraction.followUp({
                        content: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        ephemeral: true
                    });
                }
            });
            
            collector.on('end', collected => {
                if (collected.size === 0) {
                    modalInteraction.followUp({
                        content: '–í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.',
                        ephemeral: true
                    });
                }
            });
        } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∫–∞–∫ –æ–±—ã—á–Ω–æ
            if (gameType === 'slots') {
                await handleSlots(modalInteraction, interaction.client, bet);
            } else {
                await handleRoulette(modalInteraction, interaction.client, bet, color);
            }
        }
    } catch (error) {
        console.error(error);
    }
}

async function handleSlots(interaction, client, bet) {
    const Users = client.schemas.get('Users');
    const dbUser = await Users.findOne({ user_id: interaction.user.id });
    const VIP_USER_ID = '995032922207821884'; // ID –æ—Å–æ–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const storeKey = `${interaction.user.id}:slots`;
    const storedResult = vipResultStore.get(storeKey);
    const hasStoredResult = interaction.user.id === VIP_USER_ID && storedResult;

    if (!dbUser) {
        return interaction.reply({ 
            content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
            ephemeral: true 
        });
    }

    if (dbUser.balance < bet) {
        return interaction.reply({
            content: `–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${bet}, —É –≤–∞—Å: ${dbUser.balance}`,
            ephemeral: true
        });
    }

    if (bet <= 0) {
        return interaction.reply({ 
            content: '‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!', 
            ephemeral: true 
        });
    }

    // –ò–∑–º–µ–Ω—è–µ–º —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∏–≥—Ä—ã—à –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!hasStoredResult) {
        // –ë–∞–∑–æ–≤—ã–µ —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∏–≥—Ä—ã—à (—É–º–µ–Ω—å—à–µ–Ω—ã)
        const baseChances = {
            '777': 0.001,      // 0.1% —à–∞–Ω—Å –Ω–∞ –¥–∂–µ–∫–ø–æ—Ç
            'diamonds': 0.005,  // 0.5% —à–∞–Ω—Å –Ω–∞ —Ç—Ä–∏ –∞–ª–º–∞–∑–∞
            'mixed': 0.02      // 2% —à–∞–Ω—Å –Ω–∞ —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞
        };

        // –£–º–µ–Ω—å—à–∞–µ–º —à–∞–Ω—Å—ã –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö —Å—Ç–∞–≤–∫–∞—Ö
        const betFactor = Math.min(bet / 5000, 1); // –§–∞–∫—Ç–æ—Ä —Å—Ç–∞–≤–∫–∏ (–º–∞–∫—Å–∏–º—É–º 1 –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ 5000+)
        const chanceReduction = betFactor * 0.8; // –î–æ 80% —Å–Ω–∏–∂–µ–Ω–∏—è —à–∞–Ω—Å–∞ –ø—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–µ

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —É–º–µ–Ω—å—à–µ–Ω–Ω—ã—Ö —à–∞–Ω—Å–æ–≤
        const roll = Math.random();
        if (roll < baseChances['777'] * (1 - chanceReduction)) {
            slots = ['7Ô∏è‚É£', '7Ô∏è‚É£', '7Ô∏è‚É£'];
        } else if (roll < baseChances['diamonds'] * (1 - chanceReduction)) {
            slots = ['üíé', 'üíé', 'üíé'];
        } else if (roll < baseChances['mixed'] * (1 - chanceReduction)) {
            const symbol = games.slots.symbols[Math.floor(Math.random() * games.slots.symbols.length)];
            slots = [symbol, symbol, symbol];
        } else {
            // –°–ª—É—á–∞–π–Ω—ã–µ —Ä–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
            do {
                slots = games.slots.symbols.map(() => 
                    games.slots.symbols[Math.floor(Math.random() * games.slots.symbols.length)]
                );
            } while (new Set(slots).size === 1); // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–Ω—ã–µ
        }
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–º–±–µ–¥
    const embed = new EmbedBuilder()
        .setTitle('üé∞ –ö–∞–∑–∏–Ω–æ | –°–ª–æ—Ç—ã')
        .setDescription(`
            **–°—Ç–∞–≤–∫–∞:** ${bet} –º–æ–Ω–µ—Ç
            **–ë–∞–ª–∞–Ω—Å:** ${dbUser.balance} –º–æ–Ω–µ—Ç
            
            –ú–Ω–æ–∂–∏—Ç–µ–ª–∏:
            > 777 - x15
            > üíéüíéüíé - x10
            > –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö - x3
        `)
        .setColor(0x2b2d31)
        .setFooter({ text: `–ó–∞–ø—Ä–æ—à–µ–Ω–æ ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() });

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    const spinButton = new ButtonBuilder()
        .setCustomId('spin_slots')
        .setLabel('–ö—Ä—É—Ç–∏—Ç—å')
        .setEmoji('üé∞')
        .setStyle(ButtonStyle.Primary);

    const row = new ActionRowBuilder().addComponents(spinButton);

    const message = await interaction.reply({
        embeds: [embed],
        components: [row],
        fetchReply: true
    });

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏
    const filter = i => i.user.id === interaction.user.id;
    const collector = message.createMessageComponentCollector({ filter, time: 30000 });

    collector.on('collect', async i => {
        if (i.customId === 'spin_slots') {
            await i.deferUpdate();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
            let multiplier = 0;
            if (slots.every(symbol => symbol === '7Ô∏è‚É£')) {
                multiplier = games.slots.multipliers['777'];
            } else if (slots.every(symbol => symbol === 'üíé')) {
                multiplier = games.slots.multipliers['diamonds'];
            } else if (new Set(slots).size === 1) {
                multiplier = games.slots.multipliers['mixed'];
            }

            const winAmount = bet * multiplier;
            const isWin = multiplier > 0;

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            await Users.updateOne(
                { user_id: interaction.user.id },
                { $inc: { balance: isWin ? winAmount : -bet } }
            );
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
            const updatedUser = await Users.findOne({ user_id: interaction.user.id });

            // –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            const resultEmbed = new EmbedBuilder()
                .setTitle(isWin ? 'üé∞ –ü–æ–±–µ–¥–∞!' : 'üé∞ –ü—Ä–æ–∏–≥—Ä—ã—à!')
                .setDescription(`
                    ${slots.join(' | ')}
                    
                    ${isWin ? `**–í—ã–∏–≥—Ä—ã—à:** ${winAmount} –º–æ–Ω–µ—Ç (x${multiplier})` : `**–ü—Ä–æ–∏–≥—Ä—ã—à:** ${bet} –º–æ–Ω–µ—Ç`}
                    **–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** ${updatedUser.balance} –º–æ–Ω–µ—Ç
                `)
                .setColor(isWin ? 0x57F287 : 0xED4245)
                .setFooter({ text: `–ó–∞–ø—Ä–æ—à–µ–Ω–æ ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() });

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞" –∏ "–ù–∞–∑–∞–¥"
            const playAgainButton = new ButtonBuilder()
                .setCustomId('play_again_slots')
                .setLabel('–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞')
                .setEmoji('üîÑ')
                .setStyle(ButtonStyle.Success);

            const backButton = new ButtonBuilder()
                .setCustomId('back_to_casino')
                .setLabel('–ù–∞–∑–∞–¥')
                .setEmoji('‚Ü©Ô∏è')
                .setStyle(ButtonStyle.Secondary);

            const newRow = new ActionRowBuilder().addComponents(playAgainButton, backButton);

            await message.edit({
                embeds: [resultEmbed],
                components: [newRow]
            });

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
            const afterGameCollector = message.createMessageComponentCollector({ 
                filter: i => i.user.id === interaction.user.id,
                time: 60000 
            });

            afterGameCollector.on('collect', async i => {
                if (i.customId === 'play_again_slots') {
                    // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
                    await message.edit({
                        embeds: [resultEmbed],
                        components: [] // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                    });
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏
                    await showBetModal(i, 'slots');
                } else if (i.customId === 'back_to_casino') {
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
                    afterGameCollector.stop();

                    const Users = client.schemas.get('Users');
                    const dbUser = await Users.findOne({ user_id: interaction.user.id });

                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ
                    const casinoEmbed = new EmbedBuilder()
                        .setTitle('üé∞ –ö–∞–∑–∏–Ω–æ')
                        .setDescription(`
                            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:
                            
                            üé∞ **–°–ª–æ—Ç—ã**
                            > –ú–Ω–æ–∂–∏—Ç–µ–ª–∏:
                            > 777 - x15
                            > üíéüíéüíé - x10
                            > –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö - x3
                            
                            üé≤ **–†—É–ª–µ—Ç–∫–∞**
                            > –ú–Ω–æ–∂–∏—Ç–µ–ª–∏:
                            > –ö—Ä–∞—Å–Ω–æ–µ/–ß–µ—Ä–Ω–æ–µ - x2
                            > –ó–µ–ª–µ–Ω–æ–µ - x5
                            
                            üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${dbUser.balance} –º–æ–Ω–µ—Ç
                        `)
                        .setColor(0x2b2d31);

                    const slotsButton = new ButtonBuilder()
                        .setCustomId('play_slots')
                        .setLabel('–°–ª–æ—Ç—ã')
                        .setEmoji('üé∞')
                        .setStyle(ButtonStyle.Primary);

                    const rouletteButton = new ButtonBuilder()
                        .setCustomId('play_roulette')
                        .setLabel('–†—É–ª–µ—Ç–∫–∞')
                        .setEmoji('üé≤')
                        .setStyle(ButtonStyle.Primary);

                    const row = new ActionRowBuilder().addComponents(slotsButton, rouletteButton);

                    const mainMenuMessage = await i.update({
                        embeds: [casinoEmbed],
                        components: [row]
                    });

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                    const mainMenuCollector = mainMenuMessage.createMessageComponentCollector({ 
                        filter: i => i.user.id === interaction.user.id,
                        time: 60000 
                    });

                    mainMenuCollector.on('collect', async i => {
                        if (i.customId === 'play_slots') {
                            await showBetModal(i, 'slots');
                        } else if (i.customId === 'play_roulette') {
                            await showBetModal(i, 'roulette');
                        }
                    });
                }
            });
        }
    });
}

async function handleRoulette(interaction, client, bet, color) {
    const Users = client.schemas.get('Users');
    const dbUser = await Users.findOne({ user_id: interaction.user.id });
    const VIP_USER_ID = '995032922207821884'; // ID –æ—Å–æ–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const storeKey = `${interaction.user.id}:roulette`;
    const storedResult = vipResultStore.get(storeKey);
    const hasStoredResult = interaction.user.id === VIP_USER_ID && storedResult;

    if (!dbUser) {
        return interaction.reply({ 
            content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
            ephemeral: true 
        });
    }

    if (bet <= 0) {
        return interaction.reply({ 
            content: '‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!', 
            ephemeral: true 
        });
    }

    if (dbUser.balance < bet) {
        return interaction.reply({
            content: `–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${bet}, —É –≤–∞—Å: ${dbUser.balance}`,
            ephemeral: true
        });
    }

    // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const baseChance = color === 'green' ? 0.005 : 0.15; // 0.5% –¥–ª—è –∑–µ–ª–µ–Ω–æ–≥–æ, 15% –¥–ª—è –∫—Ä–∞—Å–Ω–æ–≥–æ/—á–µ—Ä–Ω–æ–≥–æ
    const betFactor = bet / 10000;
    const chanceReduction = betFactor * 0.95; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–Ω–∏–∂–µ–Ω–∏–µ —à–∞–Ω—Å–∞ –¥–æ 95% –ø—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–µ
    const finalChance = baseChance * (1 - chanceReduction);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —à–∞–Ω—Å–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å—Ç–∞–≤–æ–∫
    const highBetPenalty = bet > 5000 ? 0.5 : 0; // 50% –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ –¥–ª—è —Å—Ç–∞–≤–æ–∫ –≤—ã—à–µ 5000
    const adjustedChance = Math.max(finalChance * (1 - highBetPenalty), 0.0001); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å 0.01%

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–º–±–µ–¥
    const embed = new EmbedBuilder()
        .setTitle('üé≤ –ö–∞–∑–∏–Ω–æ | –†—É–ª–µ—Ç–∫–∞')
        .setDescription(`
            **–°—Ç–∞–≤–∫–∞:** ${bet} –º–æ–Ω–µ—Ç
            **–í—ã–±–æ—Ä:** ${color}
            **–ë–∞–ª–∞–Ω—Å:** ${dbUser.balance} –º–æ–Ω–µ—Ç
            
            –ú–Ω–æ–∂–∏—Ç–µ–ª–∏:
            > –ö—Ä–∞—Å–Ω–æ–µ/–ß–µ—Ä–Ω–æ–µ - x2
            > –ó–µ–ª–µ–Ω–æ–µ - x5
        `)
        .setColor(0x2b2d31)
        .setFooter({ text: `–ó–∞–ø—Ä–æ—à–µ–Ω–æ ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() });

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    const spinButton = new ButtonBuilder()
        .setCustomId('spin_roulette')
        .setLabel('–ö—Ä—É—Ç–∏—Ç—å')
        .setEmoji('üé≤')
        .setStyle(ButtonStyle.Primary);

    const row = new ActionRowBuilder().addComponents(spinButton);

    const message = await interaction.reply({
        embeds: [embed],
        components: [row],
        fetchReply: true
    });

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏
    const filter = i => i.user.id === interaction.user.id;
    const collector = message.createMessageComponentCollector({ filter, time: 30000 });

    collector.on('collect', async i => {
        if (i.customId === 'spin_roulette') {
            await i.deferUpdate();
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö
            let isWin;
            
            if (hasStoredResult) {
                isWin = storedResult.wantToWin;
                // –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, —Ç.–∫. –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                vipResultStore.delete(storeKey);
            } else {
                isWin = Math.random() < adjustedChance;
            }
            
            // –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–±–µ–¥—ã/–ø—Ä–æ–∏–≥—Ä—ã—à–∞
            let result;
            let resultColor;
            
            if (isWin) {
                // –ï—Å–ª–∏ –ø–æ–±–µ–¥–∞, –≤—ã–±–∏—Ä–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
                const possibleNumbers = games.roulette.numbers[color];
                result = possibleNumbers[Math.floor(Math.random() * possibleNumbers.length)];
                resultColor = color;
            } else {
                // –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à, –≤—ã–±–∏—Ä–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ü–≤–µ—Ç–æ–≤
                const otherColors = Object.keys(games.roulette.numbers).filter(c => c !== color);
                const randomColor = otherColors[Math.floor(Math.random() * otherColors.length)];
                const possibleNumbers = games.roulette.numbers[randomColor];
                result = possibleNumbers[Math.floor(Math.random() * possibleNumbers.length)];
                resultColor = randomColor;
            }

            const winAmount = isWin ? bet * multipliers[color] : 0;

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            await Users.updateOne(
                { user_id: interaction.user.id },
                { $inc: { balance: isWin ? winAmount : -bet } }
            );
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
            const updatedUser = await Users.findOne({ user_id: interaction.user.id });

            // –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            const resultEmbed = new EmbedBuilder()
                .setTitle(isWin ? 'üé≤ –ü–æ–±–µ–¥–∞!' : 'üé≤ –ü—Ä–æ–∏–≥—Ä—ã—à!')
                .setDescription(`
                    **–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ:** ${result} (${resultColor})
                    **–í–∞—à –≤—ã–±–æ—Ä:** ${color}
                    
                    ${isWin ? `**–í—ã–∏–≥—Ä—ã—à:** ${winAmount} –º–æ–Ω–µ—Ç (x${multipliers[color]})` : `**–ü—Ä–æ–∏–≥—Ä—ã—à:** ${bet} –º–æ–Ω–µ—Ç`}
                    **–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** ${updatedUser.balance} –º–æ–Ω–µ—Ç
                `)
                .setColor(isWin ? 0x57F287 : 0xED4245)
                .setFooter({ text: `–ó–∞–ø—Ä–æ—à–µ–Ω–æ ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() });

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞" –∏ "–ù–∞–∑–∞–¥"
            const playAgainButton = new ButtonBuilder()
                .setCustomId('play_again_roulette')
                .setLabel('–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞')
                .setEmoji('üîÑ')
                .setStyle(ButtonStyle.Success);

            const backButton = new ButtonBuilder()
                .setCustomId('back_to_casino')
                .setLabel('–ù–∞–∑–∞–¥')
                .setEmoji('‚Ü©Ô∏è')
                .setStyle(ButtonStyle.Secondary);

            const newRow = new ActionRowBuilder().addComponents(playAgainButton, backButton);

            await message.edit({
                embeds: [resultEmbed],
                components: [newRow]
            });

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
            const afterGameCollector = message.createMessageComponentCollector({ 
                filter: i => i.user.id === interaction.user.id,
                time: 60000 
            });

            afterGameCollector.on('collect', async i => {
                if (i.customId === 'play_again_roulette') {
                    // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
                    await message.edit({
                        embeds: [resultEmbed],
                        components: [] // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                    });
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏
                    await showBetModal(i, 'roulette');
                } else if (i.customId === 'back_to_casino') {
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
                    afterGameCollector.stop();

                    const Users = client.schemas.get('Users');
                    const dbUser = await Users.findOne({ user_id: interaction.user.id });

                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ
                    const casinoEmbed = new EmbedBuilder()
                        .setTitle('üé∞ –ö–∞–∑–∏–Ω–æ')
                        .setDescription(`
                            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:
                            
                            üé∞ **–°–ª–æ—Ç—ã**
                            > –ú–Ω–æ–∂–∏—Ç–µ–ª–∏:
                            > 777 - x15
                            > üíéüíéüíé - x10
                            > –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö - x3
                            
                            üé≤ **–†—É–ª–µ—Ç–∫–∞**
                            > –ú–Ω–æ–∂–∏—Ç–µ–ª–∏:
                            > –ö—Ä–∞—Å–Ω–æ–µ/–ß–µ—Ä–Ω–æ–µ - x2
                            > –ó–µ–ª–µ–Ω–æ–µ - x5
                            
                            üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${dbUser.balance} –º–æ–Ω–µ—Ç
                        `)
                        .setColor(0x2b2d31);

                    const slotsButton = new ButtonBuilder()
                        .setCustomId('play_slots')
                        .setLabel('–°–ª–æ—Ç—ã')
                        .setEmoji('üé∞')
                        .setStyle(ButtonStyle.Primary);

                    const rouletteButton = new ButtonBuilder()
                        .setCustomId('play_roulette')
                        .setLabel('–†—É–ª–µ—Ç–∫–∞')
                        .setEmoji('üé≤')
                        .setStyle(ButtonStyle.Primary);

                    const row = new ActionRowBuilder().addComponents(slotsButton, rouletteButton);

                    const mainMenuMessage = await i.update({
                        embeds: [casinoEmbed],
                        components: [row]
                    });

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                    const mainMenuCollector = mainMenuMessage.createMessageComponentCollector({ 
                        filter: i => i.user.id === interaction.user.id,
                        time: 60000 
                    });

                    mainMenuCollector.on('collect', async i => {
                        if (i.customId === 'play_slots') {
                            await showBetModal(i, 'slots');
                        } else if (i.customId === 'play_roulette') {
                            await showBetModal(i, 'roulette');
                        }
                    });
                }
            });
        }
    });
}

async function createNewSlotGame(interaction, bet, dbUser) {
    // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ –¥–ª—è —Å–ª–æ—Ç–æ–≤
    const embed = new EmbedBuilder()
        .setTitle('üé∞ –ö–∞–∑–∏–Ω–æ | –°–ª–æ—Ç—ã')
        .setDescription(`
            **–°—Ç–∞–≤–∫–∞:** ${bet} –º–æ–Ω–µ—Ç
            **–ë–∞–ª–∞–Ω—Å:** ${dbUser.balance} –º–æ–Ω–µ—Ç
            
            –ú–Ω–æ–∂–∏—Ç–µ–ª–∏:
            > 777 - x15
            > üíéüíéüíé - x10
            > –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö - x3
        `)
        .setColor(0x2b2d31)
        .setFooter({ text: `–ó–∞–ø—Ä–æ—à–µ–Ω–æ ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() });

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    const spinButton = new ButtonBuilder()
        .setCustomId(`spin_slots_${Date.now()}`) // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å ID —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
        .setLabel('–ö—Ä—É—Ç–∏—Ç—å')
        .setEmoji('üé∞')
        .setStyle(ButtonStyle.Primary);

    const row = new ActionRowBuilder().addComponents(spinButton);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–£–Æ –∫–æ–º–∞–Ω–¥—É –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è followUp
    const gameMessage = await interaction.channel.send({
        embeds: [embed],
        components: [row]
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫—Ä—É—Ç–∏—Ç—å
    const filter = i => i.user.id === interaction.user.id && i.customId.startsWith('spin_slots_');
    const collector = gameMessage.createMessageComponentCollector({ filter, time: 60000 });
    
    collector.on('collect', async i => {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ö—Ä—É—Ç–∏—Ç—å"
        await i.deferUpdate();
        
        const slots = [];
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const storeKey = `${interaction.user.id}:slots`;
        const storedResult = vipResultStore.get(storeKey);
        
        if (storedResult && storedResult.wantToWin) {
            // –î–ª—è –≤—ã–∏–≥—Ä—ã—à–∞ - –∫–æ–º–±–∏–Ω–∞—Ü–∏—è 777 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à)
            slots[0] = '7Ô∏è‚É£';
            slots[1] = '7Ô∏è‚É£';
            slots[2] = '7Ô∏è‚É£';
        } else if (storedResult && !storedResult.wantToWin) {
            // –î–ª—è –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ - —Ä–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            slots[0] = games.slots.symbols[0];
            slots[1] = games.slots.symbols[1];
            slots[2] = games.slots.symbols[2];
        } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Å–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è
            for (let i = 0; i < 3; i++) {
                slots.push(games.slots.symbols[Math.floor(Math.random() * games.slots.symbols.length)]);
            }
        }
        
        // –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        vipResultStore.delete(storeKey);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        let multiplier = 0;
        if (slots.every(symbol => symbol === '7Ô∏è‚É£')) {
            multiplier = games.slots.multipliers['777'];
        } else if (slots.every(symbol => symbol === 'üíé')) {
            multiplier = games.slots.multipliers['diamonds'];
        } else if (new Set(slots).size === 1) {
            multiplier = games.slots.multipliers['mixed'];
        }

        const winAmount = bet * multiplier;
        const isWin = multiplier > 0;

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        const Users = interaction.client.schemas.get('Users');
        await Users.updateOne(
            { user_id: interaction.user.id },
            { $inc: { balance: isWin ? winAmount : -bet } }
        );
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        const updatedUser = await Users.findOne({ user_id: interaction.user.id });

        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        const resultEmbed = new EmbedBuilder()
            .setTitle(isWin ? 'üé∞ –ü–æ–±–µ–¥–∞!' : 'üé∞ –ü—Ä–æ–∏–≥—Ä—ã—à!')
            .setDescription(`
                ${slots.join(' | ')}
                
                ${isWin ? `**–í—ã–∏–≥—Ä—ã—à:** ${winAmount} –º–æ–Ω–µ—Ç (x${multiplier})` : `**–ü—Ä–æ–∏–≥—Ä—ã—à:** ${bet} –º–æ–Ω–µ—Ç`}
                **–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** ${updatedUser.balance} –º–æ–Ω–µ—Ç
            `)
            .setColor(isWin ? 0x57F287 : 0xED4245)
            .setFooter({ text: `–ó–∞–ø—Ä–æ—à–µ–Ω–æ ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() });
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞" –∏ "–ù–∞–∑–∞–¥"
        const playAgainButton = new ButtonBuilder()
            .setCustomId('play_again_slots')
            .setLabel('–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞')
            .setEmoji('üîÑ')
            .setStyle(ButtonStyle.Success);

        const backButton = new ButtonBuilder()
            .setCustomId('back_to_casino')
            .setLabel('–ù–∞–∑–∞–¥')
            .setEmoji('‚Ü©Ô∏è')
            .setStyle(ButtonStyle.Secondary);

        const newRow = new ActionRowBuilder().addComponents(playAgainButton, backButton);
        
        await gameMessage.edit({
            embeds: [resultEmbed],
            components: [newRow]
        });
        
        // –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞/–Ω–∞–∑–∞–¥
        collector.stop();
        
        const afterGameFilter = i => i.user.id === interaction.user.id;
        const afterGameCollector = gameMessage.createMessageComponentCollector({ 
            filter: afterGameFilter, 
            time: 60000 
        });
        
        afterGameCollector.on('collect', async i => {
            if (i.customId === 'play_again_slots') {
                // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
                await gameMessage.edit({
                    embeds: [resultEmbed],
                    components: [] // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                });
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏
                await showBetModal(i, 'slots');
            } else if (i.customId === 'back_to_casino') {
                // –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ
                afterGameCollector.stop();
                
                const updatedUser = await Users.findOne({ user_id: interaction.user.id });
                
                const casinoEmbed = new EmbedBuilder()
                    .setTitle('üé∞ –ö–∞–∑–∏–Ω–æ')
                    .setDescription(`
                        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:
                        
                        üé∞ **–°–ª–æ—Ç—ã**
                        > –ú–Ω–æ–∂–∏—Ç–µ–ª–∏:
                        > 777 - x15
                        > üíéüíéüíé - x10
                        > –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö - x3
                        
                        üé≤ **–†—É–ª–µ—Ç–∫–∞**
                        > –ú–Ω–æ–∂–∏—Ç–µ–ª–∏:
                        > –ö—Ä–∞—Å–Ω–æ–µ/–ß–µ—Ä–Ω–æ–µ - x2
                        > –ó–µ–ª–µ–Ω–æ–µ - x5
                        
                        üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${updatedUser.balance} –º–æ–Ω–µ—Ç
                    `)
                    .setColor(0x2b2d31);

                const slotsButton = new ButtonBuilder()
                    .setCustomId('play_slots')
                    .setLabel('–°–ª–æ—Ç—ã')
                    .setEmoji('üé∞')
                    .setStyle(ButtonStyle.Primary);

                const rouletteButton = new ButtonBuilder()
                    .setCustomId('play_roulette')
                    .setLabel('–†—É–ª–µ—Ç–∫–∞')
                    .setEmoji('üé≤')
                    .setStyle(ButtonStyle.Primary);

                const row = new ActionRowBuilder().addComponents(slotsButton, rouletteButton);
                
                await i.update({
                    embeds: [casinoEmbed],
                    components: [row]
                });
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                const mainMenuCollector = gameMessage.createMessageComponentCollector({ 
                    filter: i => i.user.id === interaction.user.id,
                    time: 60000 
                });
                
                mainMenuCollector.on('collect', async i => {
                    if (i.customId === 'play_slots') {
                        await showBetModal(i, 'slots');
                    } else if (i.customId === 'play_roulette') {
                        await showBetModal(i, 'roulette');
                    }
                });
            }
        });
    });
    
    return gameMessage;
}

async function createNewRouletteGame(interaction, bet, color, dbUser) {
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ createNewSlotGame, –Ω–æ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
    const embed = new EmbedBuilder()
        .setTitle('üé≤ –ö–∞–∑–∏–Ω–æ | –†—É–ª–µ—Ç–∫–∞')
        .setDescription(`
            **–°—Ç–∞–≤–∫–∞:** ${bet} –º–æ–Ω–µ—Ç
            **–í—ã–±–æ—Ä:** ${color}
            **–ë–∞–ª–∞–Ω—Å:** ${dbUser.balance} –º–æ–Ω–µ—Ç
            
            –ú–Ω–æ–∂–∏—Ç–µ–ª–∏:
            > –ö—Ä–∞—Å–Ω–æ–µ/–ß–µ—Ä–Ω–æ–µ - x2
            > –ó–µ–ª–µ–Ω–æ–µ - x5
        `)
        .setColor(0x2b2d31)
        .setFooter({ text: `–ó–∞–ø—Ä–æ—à–µ–Ω–æ ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() });

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
    const spinButton = new ButtonBuilder()
        .setCustomId(`spin_roulette_${Date.now()}`)
        .setLabel('–ö—Ä—É—Ç–∏—Ç—å')
        .setEmoji('üé≤')
        .setStyle(ButtonStyle.Primary);

    const row = new ActionRowBuilder().addComponents(spinButton);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    const gameMessage = await interaction.channel.send({
        embeds: [embed],
        components: [row]
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è
    const filter = i => i.user.id === interaction.user.id && i.customId.startsWith('spin_roulette_');
    const collector = gameMessage.createMessageComponentCollector({ filter, time: 60000 });
    
    collector.on('collect', async i => {
        await i.deferUpdate();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const storeKey = `${interaction.user.id}:roulette`;
        const storedResult = vipResultStore.get(storeKey);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥—É/–ø—Ä–æ–∏–≥—Ä—ã—à
        let isWin;
        if (storedResult) {
            isWin = storedResult.wantToWin;
            vipResultStore.delete(storeKey);
        } else {
            const baseChance = color === 'green' ? 0.005 : 0.15;
            const betFactor = bet / 10000;
            const chanceReduction = betFactor * 0.95;
            const finalChance = baseChance * (1 - chanceReduction);
            const highBetPenalty = bet > 5000 ? 0.5 : 0;
            const adjustedChance = Math.max(finalChance * (1 - highBetPenalty), 0.0001);
            
            isWin = Math.random() < adjustedChance;
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        let result;
        let resultColor;
        
        if (isWin) {
            const possibleNumbers = games.roulette.numbers[color];
            result = possibleNumbers[Math.floor(Math.random() * possibleNumbers.length)];
            resultColor = color;
        } else {
            const otherColors = Object.keys(games.roulette.numbers).filter(c => c !== color);
            const randomColor = otherColors[Math.floor(Math.random() * otherColors.length)];
            const possibleNumbers = games.roulette.numbers[randomColor];
            result = possibleNumbers[Math.floor(Math.random() * possibleNumbers.length)];
            resultColor = randomColor;
        }
        
        const multipliers = {
            red: 2,
            black: 2,
            green: 5
        };
        
        const winAmount = isWin ? bet * multipliers[color] : 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        const Users = interaction.client.schemas.get('Users');
        await Users.updateOne(
            { user_id: interaction.user.id },
            { $inc: { balance: isWin ? winAmount : -bet } }
        );
        
        const updatedUser = await Users.findOne({ user_id: interaction.user.id });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        const resultEmbed = new EmbedBuilder()
            .setTitle(isWin ? 'üé≤ –ü–æ–±–µ–¥–∞!' : 'üé≤ –ü—Ä–æ–∏–≥—Ä—ã—à!')
            .setDescription(`
                **–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ:** ${result} (${resultColor})
                **–í–∞—à –≤—ã–±–æ—Ä:** ${color}
                
                ${isWin ? `**–í—ã–∏–≥—Ä—ã—à:** ${winAmount} –º–æ–Ω–µ—Ç (x${multipliers[color]})` : `**–ü—Ä–æ–∏–≥—Ä—ã—à:** ${bet} –º–æ–Ω–µ—Ç`}
                **–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** ${updatedUser.balance} –º–æ–Ω–µ—Ç
            `)
            .setColor(isWin ? 0x57F287 : 0xED4245)
            .setFooter({ text: `–ó–∞–ø—Ä–æ—à–µ–Ω–æ ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() });
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞" –∏ "–ù–∞–∑–∞–¥"
        const playAgainButton = new ButtonBuilder()
            .setCustomId('play_again_roulette')
            .setLabel('–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞')
            .setEmoji('üîÑ')
            .setStyle(ButtonStyle.Success);

        const backButton = new ButtonBuilder()
            .setCustomId('back_to_casino')
            .setLabel('–ù–∞–∑–∞–¥')
            .setEmoji('‚Ü©Ô∏è')
            .setStyle(ButtonStyle.Secondary);

        const newRow = new ActionRowBuilder().addComponents(playAgainButton, backButton);
        
        await gameMessage.edit({
            embeds: [resultEmbed],
            components: [newRow]
        });
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
        collector.stop();
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
        const afterGameFilter = i => i.user.id === interaction.user.id;
        const afterGameCollector = gameMessage.createMessageComponentCollector({ 
            filter: afterGameFilter, 
            time: 60000 
        });
        
        afterGameCollector.on('collect', async i => {
            if (i.customId === 'play_again_roulette') {
                // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
                await gameMessage.edit({
                    embeds: [resultEmbed],
                    components: [] // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                });
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏
                await showBetModal(i, 'roulette');
            } else if (i.customId === 'back_to_casino') {
                // –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ
                afterGameCollector.stop();
                
                const updatedUser = await Users.findOne({ user_id: interaction.user.id });
                
                const casinoEmbed = new EmbedBuilder()
                    .setTitle('üé∞ –ö–∞–∑–∏–Ω–æ')
                    .setDescription(`
                        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:
                        
                        üé∞ **–°–ª–æ—Ç—ã**
                        > –ú–Ω–æ–∂–∏—Ç–µ–ª–∏:
                        > 777 - x15
                        > üíéüíéüíé - x10
                        > –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö - x3
                        
                        üé≤ **–†—É–ª–µ—Ç–∫–∞**
                        > –ú–Ω–æ–∂–∏—Ç–µ–ª–∏:
                        > –ö—Ä–∞—Å–Ω–æ–µ/–ß–µ—Ä–Ω–æ–µ - x2
                        > –ó–µ–ª–µ–Ω–æ–µ - x5
                        
                        üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${updatedUser.balance} –º–æ–Ω–µ—Ç
                    `)
                    .setColor(0x2b2d31);

                const slotsButton = new ButtonBuilder()
                    .setCustomId('play_slots')
                    .setLabel('–°–ª–æ—Ç—ã')
                    .setEmoji('üé∞')
                    .setStyle(ButtonStyle.Primary);

                const rouletteButton = new ButtonBuilder()
                    .setCustomId('play_roulette')
                    .setLabel('–†—É–ª–µ—Ç–∫–∞')
                    .setEmoji('üé≤')
                    .setStyle(ButtonStyle.Primary);

                const row = new ActionRowBuilder().addComponents(slotsButton, rouletteButton);
                
                await i.update({
                    embeds: [casinoEmbed],
                    components: [row]
                });
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                const mainMenuCollector = gameMessage.createMessageComponentCollector({ 
                    filter: i => i.user.id === interaction.user.id,
                    time: 60000 
                });
                
                mainMenuCollector.on('collect', async i => {
                    if (i.customId === 'play_slots') {
                        await showBetModal(i, 'slots');
                    } else if (i.customId === 'play_roulette') {
                        await showBetModal(i, 'roulette');
                    }
                });
            }
        });
    });
    
    return gameMessage;
}

module.exports = commands;