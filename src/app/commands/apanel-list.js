const { SlashCommandBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('apanel-list')
        .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'),

    async execute(interaction, client) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞
            const allowedUsers = ['1370102381441978510'];
            if (!allowedUsers.includes(interaction.user.id)) {
                return interaction.reply({ 
                    embeds: [{
                        title: '‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ',
                        description: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞!',
                        color: 0xFF0000,
                        timestamp: new Date().toISOString()
                    }],
                    flags: ['Ephemeral'] 
                });
            }

            const AdminAccess = client.schemas.get('AdminAccess');
            const accessList = await AdminAccess.find({}).sort({ granted_at: -1 });

            if (accessList.length === 0) {
                return interaction.reply({
                    embeds: [{
                        title: 'üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º',
                        description: '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏',
                        color: 0x2b2d31,
                        timestamp: new Date().toISOString()
                    }],
                    flags: ['Ephemeral']
                });
            }

            let userListString = '';
            for (const access of accessList) {
                const user = await client.users.fetch(access.user_id).catch(() => null);
                const grantedBy = await client.users.fetch(access.granted_by).catch(() => null);
                
                if (user) {
                    userListString += `üë§ **${user.tag}** (${user.id})\n`;
                    userListString += `‚îú –í—ã–¥–∞–ª: ${grantedBy ? grantedBy.tag : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
                    userListString += `‚îî –î–∞—Ç–∞: <t:${Math.floor(access.granted_at.getTime() / 1000)}:F>\n\n`;
                }
            }

            const embed = {
                title: 'üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º',
                description: userListString || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö',
                color: 0x2b2d31,
                footer: {
                    text: `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${accessList.length}`
                },
                timestamp: new Date().toISOString()
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª
            const logEmbed = {
                title: 'üìù –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è',
                description: `**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–∞**`,
                fields: [
                    {
                        name: '‚è∞ –í—Ä–µ–º—è',
                        value: `<t:${Math.floor(Date.now() / 1000)}:F>`,
                        inline: true
                    }
                ],
                color: 0x3498db,
                timestamp: new Date().toISOString()
            };

            await client.channels.cache.get('1340472040787808388').send({ embeds: [logEmbed] });

            return interaction.reply({
                embeds: [embed],
                flags: ['Ephemeral']
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã apanel-list:', error);
            return interaction.reply({
                embeds: [{
                    title: '‚ùå –û—à–∏–±–∫–∞',
                    description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    color: 0xFF0000,
                    timestamp: new Date().toISOString()
                }],
                flags: ['Ephemeral']
            });
        }
    }
}; 