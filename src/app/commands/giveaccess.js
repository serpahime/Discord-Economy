const { SlashCommandBuilder } = require('discord.js');

const commands = [
    {
        data: new SlashCommandBuilder()
            .setName('giveaccess')
            .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º')
            .addUserOption(option => 
                option
                    .setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                    .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                    .setRequired(true)
            )
            .addStringOption(option =>
                option
                    .setName('–¥–µ–π—Å—Ç–≤–∏–µ')
                    .setDescription('–í—ã–¥–∞—Ç—å –∏–ª–∏ –∑–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø')
                    .setRequired(true)
                    .addChoices(
                        { name: '‚úÖ –í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø', value: 'give' },
                        { name: '‚ùå –ó–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø', value: 'remove' }
                    )
            )
            .addStringOption(option =>
                option
                    .setName('–ø—Ä–∏—á–∏–Ω–∞')
                    .setDescription('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É')
                    .setRequired(false)
            ),

        async execute(interaction, client) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
            const allowedUsers = ['1370102381441978510', '1235916722146508813s'];
            if (!allowedUsers.includes(interaction.user.id)) {
                return interaction.reply({
                    embeds: [{
                        title: '‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ',
                        description: '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—ã –±–æ—Ç–∞ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø–æ–º!',
                        color: 0xFF0000,
                        timestamp: new Date().toISOString()
                    }],
                    flags: ['Ephemeral']
                });
            }

            const targetUser = interaction.options.getUser('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
            const action = interaction.options.getString('–¥–µ–π—Å—Ç–≤–∏–µ');
            const reason = interaction.options.getString('–ø—Ä–∏—á–∏–Ω–∞') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
            const AdminAccess = client.schemas.get('AdminAccess');

            try {
                if (action === 'give') {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ—Å—Ç—É–ø
                    const existingAccess = await AdminAccess.findOne({ user_id: targetUser.id });
                    if (existingAccess) {
                        return interaction.reply({
                            embeds: [{
                                title: '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ',
                                description: `${targetUser} —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º!\n\n–í—ã–¥–∞–Ω: <@${existingAccess.granted_by}>\n–î–∞—Ç–∞: <t:${Math.floor(existingAccess.granted_at.getTime() / 1000)}:F>`,
                                color: 0xFFA500,
                                timestamp: new Date().toISOString()
                            }],
                            flags: ['Ephemeral']
                        });
                    }

                    // –í—ã–¥–∞–µ–º –¥–æ—Å—Ç—É–ø
                    await AdminAccess.create({
                        user_id: targetUser.id,
                        granted_by: interaction.user.id,
                        reason: reason
                    });

                    const successEmbed = {
                        title: '‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω',
                        description: `${targetUser} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º`,
                        fields: [
                            {
                                name: 'üë§ –í—ã–¥–∞–ª',
                                value: `${interaction.user}`,
                                inline: true
                            },
                            {
                                name: 'üìù –ü—Ä–∏—á–∏–Ω–∞',
                                value: reason,
                                inline: true
                            }
                        ],
                        color: 0x2ecc71,
                        timestamp: new Date().toISOString()
                    };

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await interaction.reply({ embeds: [successEmbed] });
                    try {
                        await targetUser.send({ embeds: [successEmbed] });
                    } catch (error) {
                        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
                    }

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª
                    const logEmbed = {
                        title: 'üìù –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è',
                        description: `**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user} –≤—ã–¥–∞–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º**`,
                        fields: [
                            {
                                name: 'üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å',
                                value: `${targetUser}`,
                                inline: true
                            },
                            {
                                name: 'üìù –ü—Ä–∏—á–∏–Ω–∞',
                                value: reason,
                                inline: true
                            },
                            {
                                name: '‚è∞ –í—Ä–µ–º—è',
                                value: `<t:${Math.floor(Date.now() / 1000)}:F>`,
                                inline: true
                            }
                        ],
                        color: 0x2ecc71,
                        timestamp: new Date().toISOString()
                    };

                    await client.channels.cache.get('1340472040787808388').send({ embeds: [logEmbed] });

                } else if (action === 'remove') {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø
                    const existingAccess = await AdminAccess.findOne({ user_id: targetUser.id });
                    if (!existingAccess) {
                        return interaction.reply({
                            embeds: [{
                                title: '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ',
                                description: `${targetUser} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º!`,
                                color: 0xFFA500,
                                timestamp: new Date().toISOString()
                            }],
                            flags: ['Ephemeral']
                        });
                    }

                    // –ó–∞–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø
                    await AdminAccess.deleteOne({ user_id: targetUser.id });

                    const removeEmbed = {
                        title: '‚ùå –î–æ—Å—Ç—É–ø —É–¥–∞–ª–µ–Ω',
                        description: `${targetUser} –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º`,
                        fields: [
                            {
                                name: 'üë§ –£–¥–∞–ª–∏–ª',
                                value: `${interaction.user}`,
                                inline: true
                            },
                            {
                                name: 'üìù –ü—Ä–∏—á–∏–Ω–∞',
                                value: reason,
                                inline: true
                            }
                        ],
                        color: 0xe74c3c,
                        timestamp: new Date().toISOString()
                    };

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await interaction.reply({ embeds: [removeEmbed] });
                    try {
                        await targetUser.send({ embeds: [removeEmbed] });
                    } catch (error) {
                        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
                    }

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª
                    const logEmbed = {
                        title: 'üìù –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è',
                        description: `**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user} —É–¥–∞–ª–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º**`,
                        fields: [
                            {
                                name: 'üë§ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                value: `${targetUser}`,
                                inline: true
                            },
                            {
                                name: 'üìù –ü—Ä–∏—á–∏–Ω–∞',
                                value: reason,
                                inline: true
                            },
                            {
                                name: '‚è∞ –í—Ä–µ–º—è',
                                value: `<t:${Math.floor(Date.now() / 1000)}:F>`,
                                inline: true
                            }
                        ],
                        color: 0xe74c3c,
                        timestamp: new Date().toISOString()
                    };

                    await client.channels.cache.get('1340472040787808388').send({ embeds: [logEmbed] });
                }

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–æ–º:', error);
                await interaction.reply({
                    embeds: [{
                        title: '‚ùå –û—à–∏–±–∫–∞',
                        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã',
                        color: 0xFF0000,
                        timestamp: new Date().toISOString()
                    }],
                    flags: ['Ephemeral']
                });
            }
        }
    }
];

module.exports = commands; 