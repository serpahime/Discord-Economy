const { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle, PermissionFlagsBits } = require('discord.js');
const { cfg } = require('../../cfg');

// –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
const processedModals = new Map();

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –º–æ–≥—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º
const protectedUsers = ['1370102381441978510', '1378425771709956146', '1235916722146508813'];

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const isHighLevelAdmin = userId => cfg.apanel.allowed_users.includes(userId);

const isProtectedUser = userId => protectedUsers.includes(userId);

const canInteractWithUser = (executorId, targetId) => {
    // –ï—Å–ª–∏ —Ü–µ–ª—å –Ω–µ –∑–∞—â–∏—â–µ–Ω–∞, –º–æ–∂–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
    if (!isProtectedUser(targetId)) return true;
    
    // –ï—Å–ª–∏ —Ü–µ–ª—å –∑–∞—â–∏—â–µ–Ω–∞, —Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º
    return isProtectedUser(executorId);
};

const isTransactionProcessing = (userId, type, amount) => {
    const key = `${userId}-${type}-${amount}`;
    const now = Date.now();
    if (processedModals.get(key) && (now - processedModals.get(key)) < 5000) return true;
    processedModals.set(key, now);
    setTimeout(() => processedModals.delete(key), 5000);
    return false;
};

const sendActionLog = async (client, logData, userId) => {
    try {
        const logChannel = client.channels.cache.get('1397345875600212069');
        if (!logChannel) {
            console.error('–õ–æ–≥-–∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞: 1397345875600212069');
            return;
        }
        await logChannel.send({ 
            embeds: [{
                title: 'üìù –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è',
                description: logData.description,
                fields: logData.fields,
                color: logData.color || 0x3498db,
                timestamp: new Date().toISOString()
            }]
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –≤ –∫–∞–Ω–∞–ª:', err);
    }
};

// –®–∞–±–ª–æ–Ω—ã –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const createErrorEmbed = (title, description) => ({
    embeds: [{
        title: `‚ùå ${title}`,
        description,
        color: 0xFF0000,
        timestamp: new Date().toISOString()
    }],
    flags: ['Ephemeral']
});

const createSuccessEmbed = (title, description) => ({
    embeds: [{
        title: `‚úÖ ${title}`,
        description,
        color: 0x2ecc71,
        timestamp: new Date().toISOString()
    }],
    flags: ['Ephemeral']
});

const createWarningEmbed = (title, description) => ({
    embeds: [{
        title: `‚ö†Ô∏è ${title}`,
        description,
        color: 0xFFA500,
        timestamp: new Date().toISOString()
    }],
    flags: ['Ephemeral']
});

// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
const createModal = (id, title, fields) => {
    const modal = new ModalBuilder().setCustomId(id).setTitle(title);
    fields.forEach(field => {
        const textInput = new TextInputBuilder()
            .setCustomId(field.id)
            .setLabel(field.label)
            .setStyle(field.style || TextInputStyle.Short)
            .setPlaceholder(field.placeholder || '')
            .setRequired(field.required !== false);
            
        if (field.maxLength) {
            textInput.setMaxLength(field.maxLength);
        }
        if (field.minLength) {
            textInput.setMinLength(field.minLength);
        }
        
        modal.addComponents(new ActionRowBuilder().addComponents(textInput));
    });
    return modal;
};

const commands = [
    {
        data: new SlashCommandBuilder()
            .setName('apanel')
            .setDescription('–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏–∫–æ–π –∏ –±—Ä–∞–∫–∞–º–∏'),

        async execute(interaction, client) {
            try {
                const AdminAccess = client.schemas?.get('AdminAccess');
                if (!AdminAccess) {
                    return interaction.reply(createErrorEmbed(
                        '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã', 
                        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
                    ));
                }

                const hasAccess = await AdminAccess.findOne({ user_id: interaction.user.id }).catch(() => null);
                if (!hasAccess && !isHighLevelAdmin(interaction.user.id)) {
                    return interaction.reply(createErrorEmbed(
                        '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ', 
                        '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!\n\n–î–æ—Å—Ç—É–ø –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `/giveaccess`'
                    ));
                }

                let accessInfo = '';
                if (hasAccess) {
                    try {
                        const grantedBy = await client.users.fetch(hasAccess.granted_by).catch(() => null);
                        accessInfo = `\n\nüë§ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω: ${grantedBy ? grantedBy.tag : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\nüìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: <t:${Math.floor(hasAccess.granted_at.getTime() / 1000)}:F>`;
                    } catch (error) {
                        accessInfo = '\n\n‚ùó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
                    }
                }

                const row = new ActionRowBuilder().addComponents(
                    new ButtonBuilder().setCustomId('give_money').setLabel('üí∞ –í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã').setStyle(ButtonStyle.Success),
                    new ButtonBuilder().setCustomId('take_money').setLabel('üî¥ –ó–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã').setStyle(ButtonStyle.Danger),
                    new ButtonBuilder().setCustomId('create_marriage').setLabel('üíç –°–æ–∑–¥–∞—Ç—å –±—Ä–∞–∫').setStyle(ButtonStyle.Primary),
                    new ButtonBuilder().setCustomId('divorce').setLabel('üíî –†–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –±—Ä–∞–∫').setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder().setCustomId('create_private_room').setLabel('üè† –°–æ–∑–¥–∞—Ç—å –ª–∏—á–Ω—É—é —Ä—É–º—É').setStyle(ButtonStyle.Primary)
                );

                const row2 = new ActionRowBuilder().addComponents(
                    new ButtonBuilder().setCustomId('delete_private_room').setLabel('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–∏—á–Ω—É—é —Ä—É–º—É').setStyle(ButtonStyle.Danger)
                );

                const components = [row, row2];
                
                if (isHighLevelAdmin(interaction.user.id)) {
                    components.push(new ActionRowBuilder().addComponents(
                        new ButtonBuilder().setCustomId('give_online').setLabel('‚è±Ô∏è –í—ã–¥–∞—Ç—å –æ–Ω–ª–∞–π–Ω').setStyle(ButtonStyle.Success),
                        new ButtonBuilder().setCustomId('take_online').setLabel('üïí –°–Ω—è—Ç—å –æ–Ω–ª–∞–π–Ω').setStyle(ButtonStyle.Danger)
                    ));
                }

                const response = await interaction.reply({
                    embeds: [{
                        title: 'üëë –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
                        description: `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:${accessInfo}`,
                        fields: [
                            { name: 'üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞', value: '`–í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã` - –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n`–ó–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã` - –ò–∑—ä—è—Ç–∏–µ –º–æ–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', inline: false },
                            { name: 'üíï –ë—Ä–∞–∫–∏', value: '`–°–æ–∑–¥–∞—Ç—å –±—Ä–∞–∫` - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–∞–∫–∞\n`–†–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –±—Ä–∞–∫` - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞', inline: false },
                            { name: 'üè† –†—É–º—ã', value: '`–°–æ–∑–¥–∞—Ç—å –ª–∏—á–Ω—É—é —Ä—É–º—É` - –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–π —Ä—É–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`–£–¥–∞–ª–∏—Ç—å –ª–∏—á–Ω—É—é —Ä—É–º—É` - –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π —Ä—É–º—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', inline: false },
                            { name: '‚è±Ô∏è –û–Ω–ª–∞–π–Ω', value: '`–í—ã–¥–∞—Ç—å –æ–Ω–ª–∞–π–Ω` - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω–ª–∞–π–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n`–°–Ω—è—Ç—å –æ–Ω–ª–∞–π–Ω` - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω–ª–∞–π–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', inline: false }
                        ],
                        color: 0x2b2d31,
                        thumbnail: { url: interaction.user.displayAvatarURL({ dynamic: true }) },
                        timestamp: new Date().toISOString()
                    }],
                    components,
                    flags: ['Ephemeral']
                });

                const collector = response.createMessageComponentCollector({ time: 3_600_000 });

                collector.on('collect', async i => {
                    if (i.user.id !== interaction.user.id) {
                        return i.reply(createErrorEmbed('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞', '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏!'));
                    }

                    try {
                        switch (i.customId) {
                            case 'give_money':
                                return i.showModal(createModal('give_money_modal', 'üí∞ –í—ã–¥–∞—á–∞ –º–æ–Ω–µ—Ç', [
                                    { id: 'userId', label: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', maxLength: 20 },
                                    { id: 'amount', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç', maxLength: 10 }
                                ]));
                            
                            case 'take_money':
                                return i.showModal(createModal('take_money_modal', 'üî¥ –ò–∑—ä—è—Ç–∏–µ –º–æ–Ω–µ—Ç', [
                                    { id: 'userId', label: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', maxLength: 20 },
                                    { id: 'amount', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç', maxLength: 10 }
                                ]));
                            
                            case 'divorce':
                                return i.showModal(createModal('divorce_modal', 'üíî –†–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞', [
                                    { id: 'userId', label: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', maxLength: 20 }
                                ]));
                            
                            case 'give_online':
                                return i.showModal(createModal('give_online_modal', '‚è±Ô∏è –í—ã–¥–∞—á–∞ –æ–Ω–ª–∞–π–Ω–∞', [
                                    { id: 'userId', label: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', maxLength: 20 },
                                    { id: 'amount', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥', maxLength: 10 },
                                    { id: 'type', label: '–¢–∏–ø –æ–Ω–ª–∞–π–Ω–∞', placeholder: 'online', maxLength: 15 }
                                ]));
                            
                            case 'take_online':
                                return i.showModal(createModal('take_online_modal', 'üïí –°–Ω—è—Ç–∏–µ –æ–Ω–ª–∞–π–Ω–∞', [
                                    { id: 'userId', label: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', maxLength: 20 },
                                    { id: 'amount', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥', maxLength: 10 },
                                    { id: 'type', label: '–¢–∏–ø –æ–Ω–ª–∞–π–Ω–∞', placeholder: 'online', maxLength: 15 }
                                ]));

                            case 'create_private_room':
                                return i.showModal(createModal('create_private_room_modal', 'üè† –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–π —Ä—É–º—ã', [
                                    { id: 'userId', label: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', maxLength: 20 },
                                    { id: 'roomName', label: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä—É–º—ã', maxLength: 32, minLength: 1 },
                                    { id: 'roleColor', label: '–¶–≤–µ—Ç —Ä–æ–ª–∏ (HEX)', placeholder: '#FFFFFF', maxLength: 7 }
                                ]));
                            
                            case 'delete_private_room':
                                return i.showModal(createModal('delete_private_room_modal', 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π —Ä—É–º—ã', [
                                    { id: 'userId', label: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', maxLength: 20 }
                                ]));
                            
                            case 'create_marriage':
                                await handleMarriageCreation(i, interaction, client);
                                break;
                                
                            default:
                                console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: ${i.customId}`);
                                return i.reply(createErrorEmbed('–û—à–∏–±–∫–∞', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞!'));
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏:', error);
                        try {
                            await i.reply(createErrorEmbed(
                                '–û—à–∏–±–∫–∞', 
                                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
                            ));
                        } catch (replyError) {
                            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—à–∏–±–∫—É –∫–Ω–æ–ø–∫–∏:', replyError);
                        }
                    }
                });

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
                const modalHandler = async modalInteraction => {
                    if (!modalInteraction.isModalSubmit()) return;
                    
                    const interactionKey = `${modalInteraction.customId}-${modalInteraction.user.id}-${Date.now()}`;
                    if (processedModals.has(interactionKey)) return;
                    processedModals.set(interactionKey, true);
                    setTimeout(() => processedModals.delete(interactionKey), 10000);

                    const { customId, fields } = modalInteraction;
                    
                    try {
                        switch (customId) {
                            case 'give_money_modal': {
                                const userId = fields.getTextInputValue('userId');
                                await handleMoneyTransaction(modalInteraction, client, userId, true);
                                break;
                            }
                            
                            case 'take_money_modal': {
                                const userId = fields.getTextInputValue('userId');
                                await handleMoneyTransaction(modalInteraction, client, userId, false);
                                break;
                            }
                            
                            case 'divorce_modal': {
                                const userId = fields.getTextInputValue('userId');
                                await handleDivorce(modalInteraction, client, userId, interaction);
                                break;
                            }
                            
                            case 'give_online_modal': {
                                const userId = fields.getTextInputValue('userId');
                                await handleOnlineTransaction(modalInteraction, client, userId, true);
                                break;
                            }
                            
                            case 'take_online_modal': {
                                const userId = fields.getTextInputValue('userId');
                                await handleOnlineTransaction(modalInteraction, client, userId, false);
                                break;
                            }

                            case 'create_private_room_modal':
                                await handlePrivateRoomCreation(modalInteraction, client, interaction);
                                break;
                                
                            case 'delete_private_room_modal':
                                const userId = modalInteraction.fields.getTextInputValue('userId');
                                await handlePrivateRoomDeletion(modalInteraction, client, userId, interaction);
                                break;
                                
                            default:
                                console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: ${customId}`);
                                break;
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
                        try {
                            await modalInteraction.reply(createErrorEmbed(
                                '–û—à–∏–±–∫–∞', 
                                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
                            ));
                        } catch (replyError) {
                            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—à–∏–±–∫—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', replyError);
                        }
                    }
                };

                const modalListener = interaction => modalHandler(interaction);
                client.on('interactionCreate', modalListener);
                collector.on('end', () => client.removeListener('interactionCreate', modalListener));

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
                return interaction.reply(createErrorEmbed(
                    '–û—à–∏–±–∫–∞', 
                    '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
                ));
            }
        }
    },
    {
        data: new SlashCommandBuilder()
            .setName('giveaccess')
            .setDescription('–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ award')
            .addUserOption(option => 
                option.setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                    .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø')
                    .setRequired(true)),

        async execute(interaction, client) {
            if (!isHighLevelAdmin(interaction.user.id)) {
                return interaction.reply(createErrorEmbed('–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ', '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞!'));
            }

            const targetUser = interaction.options.getUser('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
            const AdminAccess = client.schemas.get('AdminAccess');

            const existingAccess = await AdminAccess.findOne({ user_id: targetUser.id });
            if (existingAccess) {
                return interaction.reply(createErrorEmbed('–û—à–∏–±–∫–∞', '–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø!'));
            }

            await AdminAccess.create({
                user_id: targetUser.id,
                granted_by: interaction.user.id,
                granted_at: new Date()
            });

            await sendActionLog(client, {
                description: `**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user} –≤—ã–¥–∞–ª –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏**`,
                fields: [
                    { name: 'üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å', value: `${targetUser}`, inline: true },
                    { name: '‚è∞ –í—Ä–µ–º—è', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true }
                ],
                color: 0x2ecc71
            }, interaction.user.id);

            return interaction.reply(createSuccessEmbed('–£—Å–ø–µ—à–Ω–æ', `–î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ award –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@${targetUser.id}>`));
        }
    },
    {
        data: new SlashCommandBuilder()
            .setName('removeaccess')
            .setDescription('–£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ award')
            .addUserOption(option => 
                option.setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                    .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø')
                    .setRequired(true)),

        async execute(interaction, client) {
            if (!isHighLevelAdmin(interaction.user.id)) {
                return interaction.reply(createErrorEmbed('–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ', '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞!'));
            }

            const targetUser = interaction.options.getUser('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
            const AdminAccess = client.schemas.get('AdminAccess');

            const result = await AdminAccess.deleteOne({ user_id: targetUser.id });
            if (result.deletedCount === 0) {
                return interaction.reply(createErrorEmbed('–û—à–∏–±–∫–∞', '–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–∞!'));
            }

            await sendActionLog(client, {
                description: `**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user} —É–¥–∞–ª–∏–ª –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏**`,
                fields: [
                    { name: 'üë§ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', value: `${targetUser}`, inline: true },
                    { name: '‚è∞ –í—Ä–µ–º—è', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true }
                ],
                color: 0xe74c3c
            }, interaction.user.id);

            return interaction.reply(createSuccessEmbed('–£—Å–ø–µ—à–Ω–æ', `–î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ award —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${targetUser.id}>`));
        }
    }
];

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—é
async function safeReply(interaction, options) {
    try {
        if (!interaction.deferred && !interaction.replied) {
            await interaction.reply(options);
        } else {
            await interaction.editReply(options);
        }
    } catch (e) {
        try {
            await interaction.followUp(options);
        } catch (e2) {
            console.error('safeReply failed', { user: interaction.user?.id, customId: interaction.customId, error: e2 });
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
async function handleMoneyTransaction(modalInteraction, client, userId, isGiving) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!canInteractWithUser(modalInteraction.user.id, userId)) {
        return safeReply(modalInteraction, createErrorEmbed(
            '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ', 
            '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º! –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.'
        ));
    }

    const amount = parseInt(modalInteraction.fields.getTextInputValue('amount'));
    const action = isGiving ? 'give' : 'take';
    
    if (isTransactionProcessing(userId, action, amount)) {
        return safeReply(modalInteraction, createWarningEmbed('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'));
    }

    if (isNaN(amount) || amount <= 0) {
        return safeReply(modalInteraction, createErrorEmbed('–û—à–∏–±–∫–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!'));
    }

    const Users = client.schemas.get('Users');
    
    try {
        if (!isGiving) {
            const user = await Users.findOne({ user_id: userId });
            if (!user || user.balance < amount) {
                return safeReply(modalInteraction, createErrorEmbed('–û—à–∏–±–∫–∞', '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!'));
            }
        }

        await Users.updateOne(
            { user_id: userId },
            { $inc: { balance: isGiving ? amount : -amount } },
            { upsert: isGiving }
        );

        await sendActionLog(client, {
            description: `**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${modalInteraction.user} ${isGiving ? '–≤—ã–¥–∞–ª' : '–∏–∑—ä—è–ª'} –º–æ–Ω–µ—Ç—ã**`,
            fields: [
                { name: `üë§ ${isGiving ? '–ü–æ–ª—É—á–∞—Ç–µ–ª—å' : '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}`, value: `<@${userId}>`, inline: true },
                { name: 'üí∞ –°—É–º–º–∞', value: `${amount}`, inline: true },
                { name: '‚è∞ –í—Ä–µ–º—è', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true }
            ],
            color: isGiving ? 0x2ecc71 : 0xe74c3c
        }, modalInteraction.user.id);

        return safeReply(modalInteraction, createSuccessEmbed('–£—Å–ø–µ—à–Ω–æ', 
            `–£—Å–ø–µ—à–Ω–æ ${isGiving ? '–≤—ã–¥–∞–Ω–æ' : '–∑–∞–±—Ä–∞–Ω–æ'} ${amount} –º–æ–Ω–µ—Ç ${isGiving ? '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é' : '—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'} <@${userId}>`
        ));
    } catch (error) {
        console.error('handleMoneyTransaction', { user: modalInteraction.user.id, customId: modalInteraction.customId, error });
        return safeReply(modalInteraction, createErrorEmbed('–û—à–∏–±–∫–∞', `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ ${isGiving ? '–≤—ã–¥–∞—á–µ' : '–∏–∑—ä—è—Ç–∏–∏'} –º–æ–Ω–µ—Ç!`));
    }
}

async function handleOnlineTransaction(modalInteraction, client, userId, isGiving) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!canInteractWithUser(modalInteraction.user.id, userId)) {
        return safeReply(modalInteraction, createErrorEmbed(
            '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ', 
            '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º! –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.'
        ));
    }

    const amount = parseInt(modalInteraction.fields.getTextInputValue('amount'));
    const type = modalInteraction.fields.getTextInputValue('type');
    const action = isGiving ? 'give_online' : 'take_online';
    
    if (isTransactionProcessing(userId, action, amount)) {
        return safeReply(modalInteraction, createWarningEmbed('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'));
    }

    if (isNaN(amount) || amount <= 0) {
        return safeReply(modalInteraction, createErrorEmbed('–û—à–∏–±–∫–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!'));
    }

    if (!['online', 'online_day', 'online_week'].includes(type)) {
        return safeReply(modalInteraction, createErrorEmbed('–û—à–∏–±–∫–∞', 
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ–Ω–ª–∞–π–Ω–∞! –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: online, online_day, online_week'
        ));
    }

    const Users = client.schemas.get('Users');
    
    try {
        if (!isGiving) {
            const user = await Users.findOne({ user_id: userId });
            if (!user || !user.online || user.online[type] < amount) {
                return safeReply(modalInteraction, createErrorEmbed('–û—à–∏–±–∫–∞', `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∏–Ω—É—Ç –æ–Ω–ª–∞–π–Ω–∞ (${type})!`));
            }
        }

        const updateQuery = {};
        updateQuery[`online.${type}`] = isGiving ? amount : -amount;
        
        await Users.updateOne(
            { user_id: userId },
            { $inc: updateQuery },
            { upsert: isGiving }
        );

        await sendActionLog(client, {
            description: `**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${modalInteraction.user} ${isGiving ? '–≤—ã–¥–∞–ª' : '—Å–Ω—è–ª'} –æ–Ω–ª–∞–π–Ω**`,
            fields: [
                { name: `üë§ ${isGiving ? '–ü–æ–ª—É—á–∞—Ç–µ–ª—å' : '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}`, value: `<@${userId}>`, inline: true },
                { name: '‚è±Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', value: `${amount} –º–∏–Ω—É—Ç`, inline: true },
                { name: 'üìä –¢–∏–ø', value: type, inline: true },
                { name: '‚è∞ –í—Ä–µ–º—è', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true }
            ],
            color: isGiving ? 0x2ecc71 : 0xe74c3c
        }, modalInteraction.user.id);

        return safeReply(modalInteraction, createSuccessEmbed('–£—Å–ø–µ—à–Ω–æ', 
            `–£—Å–ø–µ—à–Ω–æ ${isGiving ? '–≤—ã–¥–∞–Ω–æ' : '—Å–Ω—è—Ç–æ'} ${amount} –º–∏–Ω—É—Ç –æ–Ω–ª–∞–π–Ω–∞ (${type}) ${isGiving ? '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é' : '—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'} <@${userId}>`
        ));
    } catch (error) {
        console.error('handleOnlineTransaction', { user: modalInteraction.user.id, customId: modalInteraction.customId, error });
        return safeReply(modalInteraction, createErrorEmbed('–û—à–∏–±–∫–∞', `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ ${isGiving ? '–≤—ã–¥–∞—á–µ' : '—Å–Ω—è—Ç–∏–∏'} –æ–Ω–ª–∞–π–Ω–∞!`));
    }
}

async function handleDivorce(modalInteraction, client, userId, originalInteraction) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!canInteractWithUser(modalInteraction.user.id, userId)) {
        return safeReply(modalInteraction, createErrorEmbed(
            '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ', 
            '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º! –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.'
        ));
    }

    const Marry = client.schemas.get('Marry');
    const Users = client.schemas.get('Users');

    try {
        const marriage = await Marry.findOne({ users: { $in: [userId] } });
        if (!marriage) {
            return safeReply(modalInteraction, createErrorEmbed('–û—à–∏–±–∫–∞', '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ!'));
        }

        const partnerId = marriage.users.find(id => id !== userId);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        if (!canInteractWithUser(modalInteraction.user.id, partnerId)) {
            return safeReply(modalInteraction, createErrorEmbed(
                '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ', 
                '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –±—Ä–∞–∫ —Å —É—á–∞—Å—Ç–∏–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!'
            ));
        }

        await Marry.deleteOne({ _id: marriage._id });
        await Users.updateMany({ user_id: { $in: [userId, partnerId] } }, { $unset: { partner_id: "" } });

        const marriageRole = originalInteraction.guild.roles.cache.get('1340657424637628448');
        if (marriageRole) {
            try {
                const member1 = await originalInteraction.guild.members.fetch(userId).catch(() => null);
                const member2 = await originalInteraction.guild.members.fetch(partnerId).catch(() => null);
                
                if (member1) await member1.roles.remove(marriageRole);
                if (member2) await member2.roles.remove(marriageRole);
                
                if (!member1 || !member2) {
                    await modalInteraction.followUp(createWarningEmbed('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', 
                        '–ë—Ä–∞–∫ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å —É –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
                    ));
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ –±—Ä–∞–∫–∞:', error);
                await modalInteraction.followUp(createWarningEmbed('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', 
                    '–ë—Ä–∞–∫ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å —É –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
                ));
            }
        }

        await sendActionLog(client, {
            description: `**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${modalInteraction.user} —Ä–∞—Å—Ç–æ—Ä–≥ –±—Ä–∞–∫**`,
            fields: [
                { name: 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', value: `<@${userId}> –∏ <@${partnerId}>`, inline: true },
                { name: '‚è∞ –í—Ä–µ–º—è', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true }
            ],
            color: 0xe74c3c
        }, modalInteraction.user.id);

        return safeReply(modalInteraction, {
            embeds: [{
                title: 'ÔøΩÔøΩ –ë—Ä–∞–∫ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç',
                description: `–ë—Ä–∞–∫ <@${userId}> —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç`,
                color: 0xe74c3c,
                timestamp: new Date().toISOString()
            }],
            flags: ['Ephemeral']
        });
    } catch (error) {
        console.error('handleDivorce', { user: modalInteraction.user.id, customId: modalInteraction.customId, error });
        return safeReply(modalInteraction, createErrorEmbed('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–∏ –±—Ä–∞–∫–∞!'));
    }
}

async function handleMarriageCreation(i, interaction, client) {
    await i.reply({
        embeds: [{
            title: 'üíç –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–∞–∫–∞',
            description: '**–û—Ç–º–µ—Ç—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—Ä–∞–∫–∞**\n\n–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞...',
            color: 0x3498db,
            timestamp: new Date().toISOString()
        }],
        flags: ['Ephemeral']
    });

    const filter = m => m.author.id === interaction.user.id && m.mentions.users.size > 0;
    
    try {
        const firstUserCollector = i.channel.createMessageCollector({ filter, time: 30000, max: 1 });

        firstUserCollector.on('collect', async firstMsg => {
            const user1 = firstMsg.mentions.users.first();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!canInteractWithUser(interaction.user.id, user1.id)) {
                return i.followUp(createErrorEmbed(
                    '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ', 
                    '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±—Ä–∞–∫–∏ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º! –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.'
                ));
            }
            
            await i.followUp({
                embeds: [{
                    title: 'üíç –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–∞–∫–∞',
                    description: `**–ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${user1}\n\n**–û—Ç–º–µ—Ç—å—Ç–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—Ä–∞–∫–∞**\n–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞...`,
                    color: 0x3498db,
                    timestamp: new Date().toISOString()
                }],
                flags: ['Ephemeral']
            });

            const secondUserCollector = i.channel.createMessageCollector({ filter, time: 30000, max: 1 });

            secondUserCollector.on('collect', async secondMsg => {
                const user2 = secondMsg.mentions.users.first();
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (!canInteractWithUser(interaction.user.id, user2.id)) {
                    return i.followUp(createErrorEmbed(
                        '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ', 
                        '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±—Ä–∞–∫–∏ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º! –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.'
                    ));
                }
                
                if (user2.id === user1.id) {
                    return i.followUp(createErrorEmbed('–û—à–∏–±–∫–∞', '–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –±—Ä–∞–∫ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!'));
                }

                const Marry = client.schemas.get('Marry');
                const Users = client.schemas.get('Users');

                try {
                    const [existingMarriage1, existingMarriage2] = await Promise.all([
                        Marry.findOne({ users: { $in: [user1.id] } }),
                        Marry.findOne({ users: { $in: [user2.id] } })
                    ]);

                    if (existingMarriage1 || existingMarriage2) {
                        return i.followUp(createErrorEmbed('–û—à–∏–±–∫–∞', '–û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ!'));
                    }

                    const currentTime = Math.floor(Date.now() / 1000);
                    const dateEnd = currentTime + (30 * 24 * 60 * 60);

                    const newMarriage = await Marry.create({
                        users: [user1.id, user2.id],
                        date: currentTime,
                        balance: 0,
                        name_love_room: `${user1.username} üíï ${user2.username}`,
                        date_end: dateEnd
                    });

                    await Promise.all([
                        Users.updateOne({ user_id: user1.id }, { $set: { partner_id: user2.id } }, { upsert: true }),
                        Users.updateOne({ user_id: user2.id }, { $set: { partner_id: user1.id } }, { upsert: true })
                    ]);

                    const marriageRole = interaction.guild.roles.cache.get('1340657424637628448');
                    if (marriageRole) {
                        try {
                            const [member1, member2] = await Promise.all([
                                interaction.guild.members.fetch(user1.id),
                                interaction.guild.members.fetch(user2.id)
                            ]);
                            
                            await Promise.all([
                                member1.roles.add(marriageRole),
                                member2.roles.add(marriageRole)
                            ]);
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏ –±—Ä–∞–∫–∞:', error);
                            await i.followUp(createWarningEmbed('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', 
                                '–ë—Ä–∞–∫ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å –æ–¥–Ω–æ–º—É –∏–ª–∏ –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.'
                            ));
                        }
                    }

                    const marriageEmbed = {
                        title: 'üíç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –±—Ä–∞–∫ —Å–æ–∑–¥–∞–Ω',
                        description: `${user1} –∏ ${user2} —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ!`,
                        fields: [
                            { name: 'üè† –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∞–≤—Ä—É–º—ã', value: newMarriage.name_love_room, inline: true },
                            { name: 'üìÖ –î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è', value: `<t:${newMarriage.date}:F>`, inline: true },
                            { name: '‚è∞ –°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –ª–∞–≤—Ä—É–º—É', value: `<t:${newMarriage.date_end}:R>`, inline: true }
                        ],
                        color: 0x2ecc71,
                        thumbnail: { url: user1.displayAvatarURL({ dynamic: true }) },
                        timestamp: new Date().toISOString()
                    };

                    await i.followUp({ embeds: [marriageEmbed], flags: ['Ephemeral'] });
                    
                    try {
                        await Promise.all([
                            user1.send({ embeds: [marriageEmbed] }),
                            user2.send({ embeds: [marriageEmbed] })
                        ]);
                    } catch (error) {
                        await i.followUp(createWarningEmbed('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', 
                            '–ë—Ä–∞–∫ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–° –æ–¥–Ω–æ–º—É –∏–ª–∏ –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.'
                        ));
                    }

                    await sendActionLog(client, {
                        description: `**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${interaction.user} —Å–æ–∑–¥–∞–ª –±—Ä–∞–∫**`,
                        fields: [
                            { name: 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', value: `${user1} –∏ ${user2}`, inline: true },
                            { name: '‚è∞ –í—Ä–µ–º—è', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true }
                        ],
                        color: 0x3498db
                    }, interaction.user.id);

                } catch (error) {
                    console.error(error);
                    await i.followUp(createErrorEmbed('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–∞–∫–∞!'));
                }
            });

            secondUserCollector.on('end', collected => {
                if (collected.size === 0) {
                    i.followUp(createErrorEmbed('–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ', '–í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å—Ç–µ–∫–ª–æ!'));
                }
            });
        });

        firstUserCollector.on('end', collected => {
            if (collected.size === 0) {
                i.followUp(createErrorEmbed('–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ', '–í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å—Ç–µ–∫–ª–æ!'));
            }
        });
    } catch (error) {
        console.error(error);
        await i.followUp(createErrorEmbed('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–∞–∫–∞!'));
    }
}

async function handlePrivateRoomCreation(modalInteraction, client, originalInteraction) {
    const userId = modalInteraction.fields.getTextInputValue('userId');
    const roomName = modalInteraction.fields.getTextInputValue('roomName');
    const roleColor = modalInteraction.fields.getTextInputValue('roleColor');

    // deferReply –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π
    if (!modalInteraction.deferred && !modalInteraction.replied) {
        await modalInteraction.deferReply({ ephemeral: true });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!canInteractWithUser(modalInteraction.user.id, userId)) {
        return safeReply(modalInteraction, createErrorEmbed(
            '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ', 
            '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä—É–º—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.'
        ));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞
    const hexColorRegex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;
    if (!hexColorRegex.test(roleColor)) {
        return safeReply(modalInteraction, createErrorEmbed(
            '–û—à–∏–±–∫–∞', 
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HEX —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: #FF0000'
        ));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è
    if (roomName.length < 1 || roomName.length > 32) {
        return safeReply(modalInteraction, createErrorEmbed(
            '–û—à–∏–±–∫–∞', 
            '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä—É–º—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤!'
        ));
    }

    // –°–ù–ê–ß–ê–õ–ê –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—é
    await safeReply(modalInteraction, {
        embeds: [{
            title: '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ä—É–º—ã...',
            description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –°–æ–∑–¥–∞—é –ª–∏—á–Ω—É—é —Ä—É–º—É...',
            color: 0x3498db,
            timestamp: new Date().toISOString()
        }],
        flags: ['Ephemeral']
    });

    const Room = client.schemas.get('Room');
    const guild = originalInteraction.guild;

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä—É–º–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingRoom = await Room.findOne({ owner_id: userId });
        if (existingRoom) {
            return safeReply(modalInteraction, createErrorEmbed(
                '–û—à–∏–±–∫–∞', 
                '–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ä—É–º–∞!'
            ));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä—É–º–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        const nameExists = await Room.findOne({ name_room: roomName });
        if (nameExists) {
            return safeReply(modalInteraction, createErrorEmbed(
                '–û—à–∏–±–∫–∞', 
                '–†—É–º–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'
            ));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const targetMember = await guild.members.fetch(userId).catch(() => null);
        if (!targetMember) {
            return safeReply(modalInteraction, createErrorEmbed(
                '–û—à–∏–±–∫–∞', 
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!'
            ));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º DM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        let canSendDM = true;
        try {
            const dmChannel = await targetMember.user.createDM();
            // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞–ª—Å—è, –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        } catch (error) {
            canSendDM = false;
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏ –∫–∞–Ω–∞–ª–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        const createTimeout = setTimeout(() => {
            console.error('–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä—É–º—ã');
        }, 25000); // 25 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

        try {
            // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏
            const role = await guild.roles.create({
                name: roomName,
                color: roleColor,
                position: guild.roles.cache.get(cfg.room_create.role_pos_create)?.position || 1,
                permissions: []
            });

            // –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            const permissionOverwrites = [
                {
                    id: guild.id,
                    deny: [PermissionFlagsBits.Connect],
                    allow: [PermissionFlagsBits.ViewChannel]
                },
                {
                    id: role.id,
                    allow: [PermissionFlagsBits.Connect, PermissionFlagsBits.Speak, PermissionFlagsBits.ViewChannel]
                },
                {
                    id: targetMember.user.id,
                    allow: [PermissionFlagsBits.Connect, PermissionFlagsBits.Speak, PermissionFlagsBits.MoveMembers, PermissionFlagsBits.ViewChannel]
                }
            ];

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
            for (const roleId of cfg.room_create.block_roles) {
                const blockedRole = guild.roles.cache.get(roleId);
                if (blockedRole) {
                    permissionOverwrites.push({
                        id: blockedRole.id,
                        deny: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.Connect]
                    });
                }
            }

            const voiceChannel = await guild.channels.create({
                name: roomName,
                type: 2, // –ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
                parent: cfg.room_create.room_category_id,
                reason: '–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                permissionOverwrites: permissionOverwrites
            });

            clearTimeout(createTimeout);

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const room = new Room({
                owner_id: userId,
                role_id: role.id,
                room_id: voiceChannel.id,
                name_role: roomName,
                name_room: roomName,
                users: [userId]
            });
            await room.save();

            // –í—ã–¥–∞—á–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await targetMember.roles.add(role.id);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –õ–°
            if (canSendDM) {
                try {
                    await targetMember.user.send({
                        embeds: [{
                            title: 'üè† –í–∞–º —Å–æ–∑–¥–∞–Ω–∞ –ª–∏—á–Ω–∞—è —Ä—É–º–∞!',
                            description: `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–ª –¥–ª—è –≤–∞—Å –ª–∏—á–Ω—É—é —Ä—É–º—É!\n\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${roomName}\n**–†–æ–ª—å:** <@&${role.id}>\n**–ö–∞–Ω–∞–ª:** <#${voiceChannel.id}>`,
                            color: parseInt(roleColor.replace('#', ''), 16),
                            thumbnail: { url: targetMember.user.displayAvatarURL({ size: 128 }) },
                            timestamp: new Date().toISOString()
                        }]
                    });
                } catch (error) {
                    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°:', error);
                }
            }

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            await sendActionLog(client, {
                description: `**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${modalInteraction.user} —Å–æ–∑–¥–∞–ª –ª–∏—á–Ω—É—é —Ä—É–º—É**`,
                fields: [
                    { name: 'üë§ –í–ª–∞–¥–µ–ª–µ—Ü', value: `<@${userId}>`, inline: true },
                    { name: 'üè† –ù–∞–∑–≤–∞–Ω–∏–µ', value: roomName, inline: true },
                    { name: 'üé® –¶–≤–µ—Ç —Ä–æ–ª–∏', value: roleColor, inline: true },
                    { name: 'üì¢ –ö–∞–Ω–∞–ª', value: `<#${voiceChannel.id}>`, inline: true },
                    { name: '‚è∞ –í—Ä–µ–º—è', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true }
                ],
                color: parseInt(roleColor.replace('#', ''), 16)
            }, modalInteraction.user.id);

            return safeReply(modalInteraction, createSuccessEmbed(
                '–†—É–º–∞ —Å–æ–∑–¥–∞–Ω–∞!', 
                `–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –ª–∏—á–Ω–∞—è —Ä—É–º–∞ –¥–ª—è <@${userId}>\n\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${roomName}\n**–†–æ–ª—å:** <@&${role.id}>\n**–ö–∞–Ω–∞–ª:** <#${voiceChannel.id}>\n**–¶–≤–µ—Ç:** ${roleColor}`
            ));
        } catch (createError) {
            clearTimeout(createTimeout);
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏/–∫–∞–Ω–∞–ª–∞:', createError);
            throw createError;
        }

    } catch (error) {
        console.error('handlePrivateRoomCreation', { user: modalInteraction.user.id, customId: modalInteraction.customId, error });
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—è
        try {
            return safeReply(modalInteraction, createErrorEmbed(
                '–û—à–∏–±–∫–∞', 
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—á–Ω–æ–π —Ä—É–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            ));
        } catch (editError) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É:', editError);
        }
    }
}

async function handlePrivateRoomDeletion(modalInteraction, client, userId, originalInteraction) {
    // deferReply –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π
    if (!modalInteraction.deferred && !modalInteraction.replied) {
        await modalInteraction.deferReply({ ephemeral: true });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!canInteractWithUser(modalInteraction.user.id, userId)) {
        return safeReply(modalInteraction, createErrorEmbed(
            '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ', 
            '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ä—É–º—ã —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.'
        ));
    }

    // –°–ù–ê–ß–ê–õ–ê –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—é
    await safeReply(modalInteraction, {
        embeds: [{
            title: '‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ —Ä—É–º—ã...',
            description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –£–¥–∞–ª—è—é –ª–∏—á–Ω—É—é —Ä—É–º—É...',
            color: 0x3498db,
            timestamp: new Date().toISOString()
        }],
        flags: ['Ephemeral']
    });

    const Room = client.schemas.get('Room');
    const guild = originalInteraction.guild;

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä—É–º–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingRoom = await Room.findOne({ owner_id: userId });
        if (!existingRoom) {
            return safeReply(modalInteraction, createErrorEmbed(
                '–û—à–∏–±–∫–∞', 
                '–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä—É–º—ã!'
            ));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const targetMember = await guild.members.fetch(userId).catch(() => null);
        if (!targetMember) {
            return safeReply(modalInteraction, createErrorEmbed(
                '–û—à–∏–±–∫–∞', 
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!'
            ));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º DM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        let canSendDM = true;
        try {
            const dmChannel = await targetMember.user.createDM();
            // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞–ª—Å—è, –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        } catch (error) {
            canSendDM = false;
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        const deleteTimeout = setTimeout(() => {
            console.error('–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä—É–º—ã');
        }, 25000); // 25 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

        try {
            // –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä—É–º–µ
            const role = await guild.roles.fetch(existingRoom.role_id).catch(() => null);
            if (role) {
                // –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä—É–º–µ
                for (const memberId of existingRoom.users) {
                    try {
                        const member = await guild.members.fetch(memberId).catch(() => null);
                        if (member) {
                            await member.roles.remove(role);
                        }
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${memberId}:`, error);
                    }
                }
                
                // –£–¥–∞–ª—è–µ–º —Å–∞–º—É —Ä–æ–ª—å
                await role.delete();
            }

            // –£–¥–∞–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
            const voiceChannel = await guild.channels.fetch(existingRoom.room_id).catch(() => null);
            if (voiceChannel) {
                await voiceChannel.delete('–£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
            }

            clearTimeout(deleteTimeout);

            // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await Room.deleteOne({ _id: existingRoom._id });

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –õ–°
            if (canSendDM) {
                try {
                    await targetMember.user.send({
                        embeds: [{
                            title: 'üóëÔ∏è –í–∞—à–∞ –ª–∏—á–Ω–∞—è —Ä—É–º–∞ —É–¥–∞–ª–µ–Ω–∞!',
                            description: `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –≤–∞—à—É –ª–∏—á–Ω—É—é —Ä—É–º—É!\n\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${existingRoom.name_room}\n\n–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä—É–º—ã –±—ã–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± —É–¥–∞–ª–µ–Ω–∏–∏.`,
                            color: 0xe74c3c,
                            thumbnail: { url: targetMember.user.displayAvatarURL({ size: 128 }) },
                            timestamp: new Date().toISOString()
                        }]
                    });
                } catch (error) {
                    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°:', error);
                }
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä—É–º—ã
            for (const memberId of existingRoom.users) {
                if (memberId !== userId) { // –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ —É–≤–µ–¥–æ–º–∏–ª–∏
                    try {
                        const member = await client.users.fetch(memberId);
                        const dmChannel = await member.createDM();
                        await dmChannel.send({
                            embeds: [{
                                title: 'üóëÔ∏è –†—É–º–∞ —É–¥–∞–ª–µ–Ω–∞!',
                                description: `–õ–∏—á–Ω–∞—è —Ä—É–º–∞ **${existingRoom.name_room}** –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π —Ä—É–º—ã.`,
                                color: 0xe74c3c,
                                timestamp: new Date().toISOString()
                            }]
                        });
                    } catch (error) {
                        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId}:`, error);
                    }
                }
            }

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            await sendActionLog(client, {
                description: `**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${modalInteraction.user} —É–¥–∞–ª–∏–ª –ª–∏—á–Ω—É—é —Ä—É–º—É**`,
                fields: [
                    { name: 'üë§ –í–ª–∞–¥–µ–ª–µ—Ü', value: `<@${userId}>`, inline: true },
                    { name: 'üè† –ù–∞–∑–≤–∞–Ω–∏–µ', value: existingRoom.name_room, inline: true },
                    { name: 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤', value: existingRoom.users.length.toString(), inline: true },
                    { name: '‚è∞ –í—Ä–µ–º—è', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true }
                ],
                color: 0xe74c3c
            }, modalInteraction.user.id);

            return safeReply(modalInteraction, createSuccessEmbed(
                '–†—É–º–∞ —É–¥–∞–ª–µ–Ω–∞!', 
                `–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –ª–∏—á–Ω–∞—è —Ä—É–º–∞ —É <@${userId}>\n\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${existingRoom.name_room}\n**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** ${existingRoom.users.length}\n\n–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä—É–º—ã –±—ã–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± —É–¥–∞–ª–µ–Ω–∏–∏.`
            ));
        } catch (deleteError) {
            clearTimeout(deleteTimeout);
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏/–∫–∞–Ω–∞–ª–∞:', deleteError);
            throw deleteError;
        }

    } catch (error) {
        console.error('handlePrivateRoomDeletion', { user: modalInteraction.user.id, customId: modalInteraction.customId, error });
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—è
        try {
            return safeReply(modalInteraction, createErrorEmbed(
                '–û—à–∏–±–∫–∞', 
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∏—á–Ω–æ–π —Ä—É–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            ));
        } catch (editError) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É:', editError);
        }
    }
}

module.exports = commands;