const { cfg } = require('../cfg'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –Ω–∞–ø—Ä—è–º—É—é
const { PermissionFlagsBits } = require('discord.js');

// –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const allowedUsers = [
    '1235916722146508813',
    '919218631810904104',
    "653645423482765312",
    '995032922207821884',
    "1251116136486142035",
    '1262212668727496797',
    '1146406135738400928',
    '1337712870359699520',
    '319455741096493056',
    '287230007443456011',
    '722433348009590835',
    '1154849113901383692'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö –∫–æ–º–Ω–∞—Ç
async function cleanupStuckRooms(guild, Marry) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–∞–∫–∏ —Å –ª—é–±–æ–≤–Ω—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏
        const marriages = await Marry.find({ love_room_id: { $exists: true } });
        
        for (const marriage of marriages) {
            const channel = guild.channels.cache.get(marriage.love_room_id);
            
            // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π
            if (!channel || channel.members.size === 0) {
                // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∫–æ–º–Ω–∞—Ç–µ –∏–∑ –ë–î
                await Marry.updateOne(
                    { _id: marriage._id },
                    { $unset: { love_room_id: "" } }
                );
                
                // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                if (channel) {
                    try {
                        await channel.delete('–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–µ–π –ª—é–±–æ–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã');
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–≤–∏—Å—à–µ–π –∫–æ–º–Ω–∞—Ç—ã ${channel.id}:`, error);
                    }
                }
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–≤–∏—Å—à–∏—Ö –∫–æ–º–Ω–∞—Ç:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—É—Å—Ç—ã—Ö —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –±–æ—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫—Ä–æ–º–µ –æ–¥–Ω–æ–π
async function cleanupEmptyRoomsInCategory(guild, categoryId, exceptChannelId, client) {
	const Private = client.schemas.get('Private');
	const Marry = client.schemas.get('Marry');
	const channels = guild.channels.cache.filter(
		c => c.parentId === categoryId && c.type === 2 // 2 = GUILD_VOICE
	);
	for (const channel of channels.values()) {
		if (channel.id === exceptChannelId) continue;
		try {
			// –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –≤–µ–¥—É—Ç—Å—è –±–æ—Ç–æ–º (–µ—Å—Ç—å –≤ –ë–î Private/Marry)
			const [isPrivate, isLove] = await Promise.all([
				Private.findOne({ room_id: channel.id }),
				Marry.findOne({ love_room_id: channel.id })
			]);
			if (!isPrivate && !isLove) continue;
			if (channel.members.size === 0) {
				await channel.delete('–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞, —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –±–æ—Ç–æ–º');
			}
		} catch (error) {
			console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—É—Å—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã ${channel.id}:`, error);
		}
	}
}

module.exports = {
    name: 'voiceStateUpdate',
    once: false,
    async execute(client, oldState, newState) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
            if (newState.channelId === cfg.privates.join_voice_id) {
                const Private = client.schemas.get('Private');
                const guild = newState.guild;
                const member = newState.member;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞
                const existingPrivate = await Private.findOne({ owner_id: member.id });

                if (existingPrivate) {
                    // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë –Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                    const existingChannel = guild.channels.cache.get(existingPrivate.room_id);
                    
                    if (existingChannel) {
                        // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–µ–≥–æ
                        await member.voice.setChannel(existingChannel.id).catch(console.error);
                    } else {
                        // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
                        await Private.deleteOne({ owner_id: member.id });
                        await createNewPrivateChannel();
                    }
                } else {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
                    await createNewPrivateChannel();
                }

                async function createNewPrivateChannel() {
                    // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    const updatedPrivate = await Private.findOne({ owner_id: member.id });
                    if (updatedPrivate && updatedPrivate.room_id) {
                        const existingChannel = guild.channels.cache.get(updatedPrivate.room_id);
                        if (existingChannel) {
                            await member.voice.setChannel(existingChannel.id);
                            return;
                        }
                    }
                    try {
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
                        const channel = await guild.channels.create({
                            name: `üîë„Éª${member.user.username}`,
                            type: 2, // 2 = GUILD_VOICE
                            parent: newState.channel.parent, // –°–æ–∑–¥–∞–µ–º –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                            reason: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã',
                            permissionOverwrites: [
                                {
                                    id: guild.id, // @everyone
                                    deny: [PermissionFlagsBits.Connect, PermissionFlagsBits.Speak]
                                },
                                {
                                    id: member.id, // –í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–Ω–∞—Ç—ã
                                    allow: [
                                        PermissionFlagsBits.ViewChannel,
                                        PermissionFlagsBits.Connect,
                                        PermissionFlagsBits.Speak,
                                        PermissionFlagsBits.Stream,
                                        PermissionFlagsBits.UseVAD,
                                        PermissionFlagsBits.PrioritySpeaker
                                    ]
                                },
                                {
                                    id: client.user.id, // –ë–æ—Ç
                                    allow: [
                                        PermissionFlagsBits.Connect,
                                        PermissionFlagsBits.Speak,
                                        PermissionFlagsBits.ManageChannels,
                                        PermissionFlagsBits.ManageRoles
                                    ]
                                }
                            ]
                        });

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ –≤ –ë–î
                        await Private.create({
                            owner_id: member.id,
                            room_id: channel.id
                        });

                        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
                        await member.voice.setChannel(channel.id);

                        // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –±–æ—Ç–æ–º)
                        await cleanupEmptyRoomsInCategory(guild, channel.parentId, channel.id, client);

                        console.log(`–°–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è ${member.user.tag}`);
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã:', error);
                    }
                }
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
            if (newState.channelId) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—é–±–æ–π –≤—Ö–æ–¥ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
                const Marry = client.schemas.get('Marry');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª –ª—é–±–æ–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π
                const marriage = await Marry.findOne({
                    love_room_id: newState.channelId
                });

                if (marriage && 
                    !marriage.users.includes(newState.member.id) && 
                    !allowedUsers.includes(newState.member.id)) {
                    // –ï—Å–ª–∏ —ç—Ç–æ –ª—é–±–æ–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Å—É–ø—Ä—É–≥–æ–≤
                    // –∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
                    // –æ—Ç–∫–ª—é—á–∞–µ–º –µ–≥–æ –æ—Ç –∫–∞–Ω–∞–ª–∞
                    await newState.member.voice.disconnect();
                    return;
                }
            }

            if (newState.channelId === cfg.marry.join_voice_id) {
                const Marry = client.schemas.get('Marry');
                const guild = newState.guild;
                const member = newState.member;

                // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∑–∞–≤–∏—Å—à–∏—Ö –∫–æ–º–Ω–∞—Ç
                await cleanupStuckRooms(guild, Marry);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±—Ä–∞–∫–µ
                const marriage = await Marry.findOne({
                    users: member.id
                });

                if (!marriage) {
                    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±—Ä–∞–∫–µ, –æ—Ç–∫–ª—é—á–∞–µ–º –µ–≥–æ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                    await member.voice.disconnect();
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª—é–±–æ–≤–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
                if (marriage.love_room_id) {
                    const existingChannel = guild.channels.cache.get(marriage.love_room_id);
                    
                    if (existingChannel) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–∞—è –ª–∏ –∫–æ–º–Ω–∞—Ç–∞
                        if (existingChannel.members.size === 0) {
                            // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞—è, —É–¥–∞–ª—è–µ–º –µ—ë –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                            try {
                                await existingChannel.delete('–£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π –ª—é–±–æ–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º');
                                await Marry.updateOne(
                                    { _id: marriage._id },
                                    { $unset: { love_room_id: "" } }
                                );
                                await createNewLoveRoom();
                            } catch (error) {
                                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—É—Å—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã:', error);
                            }
                        } else {
                            // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–µ–≥–æ
                            await member.voice.setChannel(existingChannel.id).catch(console.error);
                        }
                    } else {
                        // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                        await createNewLoveRoom();
                    }
                } else {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ª—é–±–æ–≤–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
                    await createNewLoveRoom();
                }

                async function createNewLoveRoom() {
                    // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    const updatedMarriage = await Marry.findOne({ users: member.id });
                    if (updatedMarriage.love_room_id) {
                        // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        const existingChannel = guild.channels.cache.get(updatedMarriage.love_room_id);
                        if (existingChannel) {
                            await member.voice.setChannel(existingChannel.id);
                            return;
                        }
                    }
                    try {
                        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
                        const partner = marriage.users.find(id => id !== member.id);
                        const loveroomname = marriage.name_love_room;

                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
                        const channel = await guild.channels.create({
                            name: `${loveroomname}`,
                            type: 2,
                            parent: newState.channel.parent,
                            reason: '–°–æ–∑–¥–∞–Ω–∏–µ –ª—é–±–æ–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã',
                            permissionOverwrites: [
                                {
                                    id: guild.id,
                                    deny: [PermissionFlagsBits.Connect, PermissionFlagsBits.Speak]
                                },
                                {
                                    id: member.id,
                                    allow: [
                                        PermissionFlagsBits.ViewChannel,
                                        PermissionFlagsBits.Connect,
                                        PermissionFlagsBits.Speak,
                                        PermissionFlagsBits.Stream,
                                        PermissionFlagsBits.UseVAD,
                                        PermissionFlagsBits.PrioritySpeaker
                                    ]
                                },
                                {
                                    id: partner,
                                    allow: [
                                        PermissionFlagsBits.ViewChannel,
                                        PermissionFlagsBits.Connect,
                                        PermissionFlagsBits.Speak,
                                        PermissionFlagsBits.Stream,
                                        PermissionFlagsBits.UseVAD,
                                        PermissionFlagsBits.PrioritySpeaker
                                    ]
                                },
                                {
                                    id: client.user.id,
                                    allow: [
                                        PermissionFlagsBits.Connect,
                                        PermissionFlagsBits.Speak,
                                        PermissionFlagsBits.ManageChannels,
                                        PermissionFlagsBits.ManageRoles
                                    ]
                                }
                            ]
                        });

                        // –û–±–Ω–æ–≤–ª—è–µ–º ID –∫–æ–º–Ω–∞—Ç—ã –≤ –ë–î
                        await Marry.updateOne(
                            { users: member.id },
                            { $set: { love_room_id: channel.id } }
                        );

                        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
                        await member.voice.setChannel(channel.id);

                        // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–º–Ω–∞—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫—Ä–æ–º–µ –æ–¥–Ω–æ–π (—Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –±–æ—Ç–æ–º)
                        await cleanupEmptyRoomsInCategory(guild, channel.parentId, '1213918576646295612', client);

                        console.log(`–°–æ–∑–¥–∞–Ω–∞ –ª—é–±–æ–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è ${member.user.tag}`);
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª—é–±–æ–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã:', error);
                        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∫–æ–º–Ω–∞—Ç–µ –∏–∑ –ë–î
                        await Marry.updateOne(
                            { users: member.id },
                            { $unset: { love_room_id: "" } }
                        );
                    }
                }
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ voiceStateUpdate:', error);
        }
    }
};